(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{526:function(n,e,t){"use strict";t.r(e);var _=t(6),a=Object(_.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[n._v("/* 启动MySQL */\nnet start mysql")]),n._v(" "),t("p",[n._v("/* 连接与断开服务器 */\nmysql -h 地址 -P 端口 -u 用户名 -p 密码")]),n._v(" "),t("p",[n._v("/* 跳过权限验证登录MySQL */\nmysqld --skip-grant-tables\n-- 修改root密码\n密码加密函数password()\nupdate mysql.user set password=password('root');")]),n._v(" "),t("p",[n._v("SHOW PROCESSLIST -- 显示哪些线程正在运行\nSHOW VARIABLES --")]),n._v(" "),t("p",[n._v("/* 数据库操作 */ ------------------\n-- 查看当前数据库\nselect database();\n-- 显示当前时间、用户名、数据库版本\nselect now(), user(), version();\n-- 创建库\ncreate database[ if not exists] 数据库名 数据库选项\n数据库选项：\nCHARACTER SET charset_name\nCOLLATE collation_name\n-- 查看已有库\nshow databases[ like 'pattern']\n-- 查看当前库信息\nshow create database 数据库名\n-- 修改库的选项信息\nalter database 库名 选项信息\n-- 删除库\ndrop database[ if exists] 数据库名\n同时删除该数据库相关的目录及其目录内容")]),n._v(" "),t("p",[n._v("/* 表的操作 */ ------------------\n-- 创建表\ncreate [temporary] table[ if not exists] [库名.]表名 ( 表的结构定义 )[ 表选项]\n每个字段必须有数据类型\n最后一个字段后不能有逗号\ntemporary 临时表，会话结束时表自动消失\n对于字段的定义：\n字段名 数据类型 [NOT NULL | NULL] [DEFAULT default_value] [AUTO_INCREMENT] [UNIQUE [KEY] | [PRIMARY] KEY] [COMMENT 'string']\n-- 表选项\n-- 字符集\nCHARSET = charset_name\n如果表没有设定，则使用数据库字符集\n-- 存储引擎\nENGINE = engine_name"),t("br"),n._v("\n表在管理数据时采用的不同的数据结构，结构不同会导致处理方式、提供的特性操作等不同\n常见的引擎：InnoDB MyISAM Memory/Heap BDB Merge Example CSV MaxDB Archive\n不同的引擎在保存表的结构和数据时采用不同的方式\nMyISAM表文件含义：.frm表定义，.MYD表数据，.MYI表索引\nInnoDB表文件含义：.frm表定义，表空间数据和日志文件\nSHOW ENGINES -- 显示存储引擎的状态信息\nSHOW ENGINE 引擎名 {LOGS|STATUS} -- 显示存储引擎的日志或状态信息\n-- 数据文件目录\nDATA DIRECTORY = '目录'\n-- 索引文件目录\nINDEX DIRECTORY = '目录'\n-- 表注释\nCOMMENT = 'string'\n-- 分区选项\nPARTITION BY ... (详细见手册)\n-- 查看所有表\nSHOW TABLES[ LIKE 'pattern']\nSHOW TABLES FROM 表名\n-- 查看表机构\nSHOW CREATE TABLE 表名    （信息更详细）\nDESC 表名 / DESCRIBE 表名 / EXPLAIN 表名 / SHOW COLUMNS FROM 表名 [LIKE 'PATTERN']\nSHOW TABLE STATUS [FROM db_name] [LIKE 'pattern']\n-- 修改表\n-- 修改表本身的选项\nALTER TABLE 表名 表的选项\nEG:    ALTER TABLE 表名 ENGINE=MYISAM;\n-- 对表进行重命名\nRENAME TABLE 原表名 TO 新表名\nRENAME TABLE 原表名 TO 库名.表名    （可将表移动到另一个数据库）\n-- RENAME可以交换两个表名\n-- 修改表的字段机构\nALTER TABLE 表名 操作名\n-- 操作名\nADD[ COLUMN] 字段名        -- 增加字段\nAFTER 字段名            -- 表示增加在该字段名后面\nFIRST                -- 表示增加在第一个\nADD PRIMARY KEY(字段名)    -- 创建主键\nADD UNIQUE [索引名] (字段名)-- 创建唯一索引\nADD INDEX [索引名] (字段名)    -- 创建普通索引\nADD\nDROP[ COLUMN] 字段名        -- 删除字段\nMODIFY[ COLUMN] 字段名 字段属性        -- 支持对字段属性进行修改，不能修改字段名(所有原有属性也需写上)\nCHANGE[ COLUMN] 原字段名 新字段名 字段属性        -- 支持对字段名修改\nDROP PRIMARY KEY    -- 删除主键(删除主键前需删除其AUTO_INCREMENT属性)\nDROP INDEX 索引名    -- 删除索引\nDROP FOREIGN KEY 外键    -- 删除外键")]),n._v(" "),t("p",[n._v("-- 删除表\nDROP TABLE[ IF EXISTS] 表名 ...\n-- 清空表数据\nTRUNCATE [TABLE] 表名\n-- 复制表结构\nCREATE TABLE 表名 LIKE 要复制的表名\n-- 复制表结构和数据\nCREATE TABLE 表名 [AS] SELECT * FROM 要复制的表名\n-- 检查表是否有错误\nCHECK TABLE tbl_name [, tbl_name] ... [option] ...\n-- 优化表\nOPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...\n-- 修复表\nREPAIR [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ... [QUICK] [EXTENDED] [USE_FRM]\n-- 分析表\nANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...")]),n._v(" "),t("p",[n._v("/* 数据操作 "),t("em",[n._v("/ ------------------\n-- 增\nINSERT [INTO] 表名 [(字段列表)] VALUES (值列表)[, (值列表), ...]\n-- 如果要插入的值列表包含所有字段并且顺序一致，则可以省略字段列表。\n-- 可同时插入多条数据记录！\nREPLACE 与 INSERT 完全一样，可互换。\nINSERT [INTO] 表名 SET 字段名=值[, 字段名=值, ...]\n-- 查\nSELECT 字段列表 FROM 表名[ 其他子句]\n-- 可来自多个表的多个字段\n-- 其他子句可以不使用\n-- 字段列表可以用")]),n._v("代替，表示所有字段\n-- 删\nDELETE FROM 表名[ 删除条件子句]\n没有条件子句，则会删除全部\n-- 改\nUPDATE 表名 SET 字段名=新值[, 字段名=新值] [更新条件]")]),n._v(" "),t("p",[n._v("/* 字符集编码 */ ------------------\n-- MySQL、数据库、表、字段均可设置编码\n-- 数据编码与客户端编码不需一致\nSHOW VARIABLES LIKE 'character_set_%'    -- 查看所有字符集编码项\ncharacter_set_client        客户端向服务器发送数据时使用的编码\ncharacter_set_results        服务器端将结果返回给客户端所使用的编码\ncharacter_set_connection    连接层编码\nSET 变量名 = 变量值\nset character_set_client = gbk;\nset character_set_results = gbk;\nset character_set_connection = gbk;\nSET NAMES GBK;    -- 相当于完成以上三个设置\n-- 校对集\n校对集用以排序\nSHOW CHARACTER SET [LIKE 'pattern']/SHOW CHARSET [LIKE 'pattern']    查看所有字符集\nSHOW COLLATION [LIKE 'pattern']        查看所有校对集\ncharset 字符集编码        设置字符集编码\ncollate 校对集编码        设置校对集编码")]),n._v(" "),t("p",[n._v("/* 数据类型（列类型） */ ------------------")]),n._v(" "),t("ol",[t("li",[t("p",[n._v("数值类型\n-- a. 整型 ----------\n类型            字节        范围（有符号位）\ntinyint        1字节    -128 ~ 127        无符号位：0 ~ 255\nsmallint    2字节    -32768 ~ 32767\nmediumint    3字节    -8388608 ~ 8388607\nint            4字节\nbigint        8字节")]),n._v(" "),t("p",[n._v("int(M)    M表示总位数")]),n._v(" "),t("ul",[t("li",[n._v("默认存在符号位，unsigned 属性修改")]),n._v(" "),t("li",[n._v("显示宽度，如果某个数不够定义字段时设置的位数，则前面以0补填，zerofill 属性修改\n例：int(5)    插入一个数'123'，补填后为'00123'")]),n._v(" "),t("li",[n._v("在满足要求的情况下，越小越好。")]),n._v(" "),t("li",[n._v("1表示bool值真，0表示bool值假。MySQL没有布尔类型，通过整型0和1表示。常用tinyint(1)表示布尔型。")])])])]),n._v(" "),t("p",[n._v("-- b. 浮点型 ----------\n类型                字节        范围\nfloat(单精度)        4字节\ndouble(双精度)    8字节\n浮点型既支持符号位 unsigned 属性，也支持显示宽度 zerofill 属性。\n不同于整型，前后均会补填0.\n定义浮点型时，需指定总位数和小数位数。\nfloat(M, D)        double(M, D)\nM表示总位数，D表示小数位数。\nM和D的大小会决定浮点数的范围。不同于整型的固定范围。\nM既表示总位数（不包括小数点和正负号），也表示显示宽度（所有显示符号均包括）。\n支持科学计数法表示。\n浮点数表示近似值。")]),n._v(" "),t("p",[n._v("-- c. 定点数 ----------\ndecimal    -- 可变长度\ndecimal(M, D)    M也表示总位数，D表示小数位数。\n保存一个精确的数值，不会发生数据的改变，不同于浮点数的四舍五入。\n将浮点数转换为字符串来保存，每9位数字保存为4个字节。")]),n._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[n._v("字符串类型\n-- a. char, varchar ----------\nchar    定长字符串，速度快，但浪费空间\nvarchar    变长字符串，速度慢，但节省空间\nM表示能存储的最大长度，此长度是字符数，非字节数。\n不同的编码，所占用的空间不同。\nchar,最多255个字符，与编码无关。\nvarchar,最多65535字符，与编码有关。\n一条有效记录最大不能超过65535个字节。\nutf8 最大为21844个字符，gbk 最大为32766个字符，latin1 最大为65532个字符\nvarchar 是变长的，需要利用存储空间保存 varchar 的长度，如果数据小于255个字节，则采用一个字节来保存长度，反之需要两个字节来保存。\nvarchar 的最大有效长度由最大行大小和使用的字符集确定。\n最大有效长度是65532字节，因为在varchar存字符串时，第一个字节是空的，不存在任何数据，然后还需两个字节来存放字符串的长度，所以有效长度是64432-1-2=65532字节。\n例：若一个表定义为 CREATE TABLE tb(c1 int, c2 char(30), c3 varchar(N)) charset=utf8; 问N的最大值是多少？ 答：(65535-1-2-4-30*3)/3")])]),n._v(" "),t("p",[n._v("-- b. blob, text ----------\nblob 二进制字符串（字节字符串）\ntinyblob, blob, mediumblob, longblob\ntext 非二进制字符串（字符字符串）\ntinytext, text, mediumtext, longtext\ntext 在定义时，不需要定义长度，也不会计算总长度。\ntext 类型在定义时，不可给default值")]),n._v(" "),t("p",[n._v("-- c. binary, varbinary ----------\n类似于char和varchar，用于保存二进制字符串，也就是保存字节字符串而非字符字符串。\nchar, varchar, text 对应 binary, varbinary, blob.")]),n._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[n._v("日期时间类型\n一般用整型保存时间戳，因为PHP可以很方便的将时间戳进行格式化。\ndatetime    8字节    日期及时间        1000-01-01 00:00:00 到 9999-12-31 23:59:59\ndate        3字节    日期            1000-01-01 到 9999-12-31\ntimestamp    4字节    时间戳        19700101000000 到 2038-01-19 03:14:07\ntime        3字节    时间            -838:59:59 到 838:59:59\nyear        1字节    年份            1901 - 2155")])]),n._v(" "),t("p",[n._v("datetime    “YYYY-MM-DD hh:mm:ss”\ntimestamp    “YY-MM-DD hh:mm:ss”\n“YYYYMMDDhhmmss”\n“YYMMDDhhmmss”\nYYYYMMDDhhmmss\nYYMMDDhhmmss\ndate        “YYYY-MM-DD”\n“YY-MM-DD”\n“YYYYMMDD”\n“YYMMDD”\nYYYYMMDD\nYYMMDD\ntime        “hh:mm:ss”\n“hhmmss”\nhhmmss\nyear        “YYYY”\n“YY”\nYYYY\nYY")]),n._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[n._v("枚举和集合\n-- 枚举(enum) ----------\nenum(val1, val2, val3...)\n在已知的值中进行单选。最大数量为65535.\n枚举值在保存时，以2个字节的整型(smallint)保存。每个枚举值，按保存的位置顺序，从1开始逐一递增。\n表现为字符串类型，存储却是整型。\nNULL值的索引是NULL。\n空字符串错误值的索引值是0。")])]),n._v(" "),t("p",[n._v("-- 集合（set） ----------\nset(val1, val2, val3...)\ncreate table tab ( gender set('男', '女', '无') );\ninsert into tab values ('男, 女');\n最多可以有64个不同的成员。以bigint存储，共8个字节。采取位运算的形式。\n当创建表时，SET成员值的尾部空格将自动被删除。")]),n._v(" "),t("p",[n._v("/* 选择类型 */\n-- PHP角度")]),n._v(" "),t("ol",[t("li",[n._v("功能满足")]),n._v(" "),t("li",[n._v("存储空间尽量小，处理效率更高")]),n._v(" "),t("li",[n._v("考虑兼容问题")])]),n._v(" "),t("p",[n._v("-- IP存储 ----------")]),n._v(" "),t("ol",[t("li",[n._v("只需存储，可用字符串")]),n._v(" "),t("li",[n._v("如果需计算，查找等，可存储为4个字节的无符号int，即unsigned\n"),t("ol",[t("li",[n._v("PHP函数转换\nip2long可转换为整型，但会出现携带符号问题。需格式化为无符号的整型。\n利用sprintf函数格式化字符串\nsprintf(\"%u\", ip2long('192.168.3.134'));\n然后用long2ip将整型转回IP字符串")]),n._v(" "),t("li",[n._v("MySQL函数转换(无符号整型，UNSIGNED)\nINET_ATON('127.0.0.1') 将IP转为整型\nINET_NTOA(2130706433) 将整型转为IP")])])])]),n._v(" "),t("p",[n._v("/* 列属性（列约束） */ ------------------")]),n._v(" "),t("ol",[t("li",[t("p",[n._v("主键")]),n._v(" "),t("ul",[t("li",[n._v("能唯一标识记录的字段，可以作为主键。")]),n._v(" "),t("li",[n._v("一个表只能有一个主键。")]),n._v(" "),t("li",[n._v("主键具有唯一性。")]),n._v(" "),t("li",[n._v("声明字段时，用 primary key 标识。\n也可以在字段列表之后声明\n例：create table tab ( id int, stu varchar(10), primary key (id));")]),n._v(" "),t("li",[n._v("主键字段的值不能为null。")]),n._v(" "),t("li",[n._v("主键可以由多个字段共同组成。此时需要在字段列表后声明的方法。\n例：create table tab ( id int, stu varchar(10), age int, primary key (stu, age));")])])]),n._v(" "),t("li",[t("p",[n._v("unique 唯一索引（唯一约束）\n使得某字段的值也不能重复。")])]),n._v(" "),t("li",[t("p",[n._v("null 约束\nnull不是数据类型，是列的一个属性。\n表示当前列是否可以为null，表示什么都没有。\nnull, 允许为空。默认。\nnot null, 不允许为空。\ninsert into tab values (null, 'val');\n-- 此时表示将第一个字段的值设为null, 取决于该字段是否允许为null")])]),n._v(" "),t("li",[t("p",[n._v("default 默认值属性\n当前字段的默认值。\ninsert into tab values (default, 'val');    -- 此时表示强制使用默认值。\ncreate table tab ( add_time timestamp default current_timestamp );\n-- 表示将当前时间的时间戳设为默认值。\ncurrent_date, current_time")])]),n._v(" "),t("li",[t("p",[n._v("auto_increment 自动增长约束\n自动增长必须为索引（主键或unique）\n只能存在一个字段为自动增长。\n默认为1开始自动增长。可以通过表属性 auto_increment = x进行设置，或 alter table tbl auto_increment = x;")])]),n._v(" "),t("li",[t("p",[n._v("comment 注释\n例：create table tab ( id int ) comment '注释内容';")])]),n._v(" "),t("li",[t("p",[n._v("foreign key 外键约束\n用于限制主表与从表数据完整性。\nalter table t1 add constraint "),t("code",[n._v("t1_t2_fk")]),n._v(" foreign key (t1_id) references t2(id);\n-- 将表t1的t1_id外键关联到表t2的id字段。\n-- 每个外键都有一个名字，可以通过 constraint 指定")]),n._v(" "),t("p",[n._v("存在外键的表，称之为从表（子表），外键指向的表，称之为主表（父表）。")]),n._v(" "),t("p",[n._v("作用：保持数据一致性，完整性，主要目的是控制存储在外键表（从表）中的数据。")]),n._v(" "),t("p",[n._v("MySQL中，可以对InnoDB引擎使用外键约束：\n语法：\nforeign key (外键字段） references 主表名 (关联字段) [主表记录删除时的动作] [主表记录更新时的动作]\n此时需要检测一个从表的外键需要约束为主表的已存在的值。外键在没有关联的情况下，可以设置为null.前提是该外键列，没有not null。")]),n._v(" "),t("p",[n._v("可以不指定主表记录更改或更新时的动作，那么此时主表的操作被拒绝。\n如果指定了 on update 或 on delete：在删除或更新时，有如下几个操作可以选择：")]),n._v(" "),t("ol",[t("li",[n._v("cascade，级联操作。主表数据被更新（主键值更新），从表也被更新（外键值更新）。主表记录被删除，从表相关记录也被删除。")]),n._v(" "),t("li",[n._v("set null，设置为null。主表数据被更新（主键值更新），从表的外键被设置为null。主表记录被删除，从表相关记录外键被设置成null。但注意，要求该外键列，没有not null属性约束。")]),n._v(" "),t("li",[n._v("restrict，拒绝父表删除和更新。")])]),n._v(" "),t("p",[n._v("注意，外键只被InnoDB存储引擎所支持。其他引擎是不支持的。")])])]),n._v(" "),t("p",[n._v("/* 建表规范 */ ------------------\n-- Normal Format, NF\n- 每个表保存一个实体信息\n- 每个具有一个ID字段作为主键\n- ID主键 + 原子表\n-- 1NF, 第一范式\n字段不能再分，就满足第一范式。\n-- 2NF, 第二范式\n满足第一范式的前提下，不能出现部分依赖。\n消除符合主键就可以避免部分依赖。增加单列关键字。\n-- 3NF, 第三范式\n满足第二范式的前提下，不能出现传递依赖。\n某个字段依赖于主键，而有其他字段依赖于该字段。这就是传递依赖。\n将一个实体信息的数据放在一个表内实现。")]),n._v(" "),t("p",[n._v("/* select */ ------------------")]),n._v(" "),t("p",[n._v("select [all|distinct] select_expr from -> where -> group by [合计函数] -> having -> order by -> limit")]),n._v(" "),t("p",[n._v("a. select_expr\n-- 可以用 * 表示所有字段。\nselect * from tb;\n-- 可以使用表达式（计算公式、函数调用、字段也是个表达式）\nselect stu, 29+25, now() from tb;\n-- 可以为每个列使用别名。适用于简化列标识，避免多个列标识符重复。\n- 使用 as 关键字，也可省略 as.\nselect stu+10 as add10 from tb;")]),n._v(" "),t("p",[n._v("b. from 子句\n用于标识查询来源。\n-- 可以为表起别名。使用as关键字。\nselect * from tb1 as tt, tb2 as bb;\n-- from子句后，可以同时出现多个表。\n-- 多个表会横向叠加到一起，而数据会形成一个笛卡尔积。\nselect * from tb1, tb2;")]),n._v(" "),t("p",[n._v("c. where 子句\n-- 从from获得的数据源中进行筛选。\n-- 整型1表示真，0表示假。\n-- 表达式由运算符和运算数组成。\n-- 运算数：变量（字段）、值、函数返回值\n-- 运算符：\n=, <=>, <>, !=, <=, <, >=, >, !, &&, ||,\nin (not) null, (not) like, (not) in, (not) between and, is (not), and, or, not, xor\nis/is not 加上ture/false/unknown，检验某个值的真假\n<=>与<>功能相同，<=>可用于null比较")]),n._v(" "),t("p",[n._v("d. group by 子句, 分组子句\ngroup by 字段/别名 [排序方式]\n分组后会进行排序。升序：ASC，降序：DESC")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("以下[合计函数]需配合 group by 使用：\ncount 返回不同的非NULL值数目    count(*)、count(字段)\nsum 求和\nmax 求最大值\nmin 求最小值\navg 求平均值\ngroup_concat 返回带有来自一个组的连接的非NULL值的字符串结果。组内字符串连接。\n")])])]),t("p",[n._v("e. having 子句，条件子句\n与 where 功能、用法相同，执行时机不同。\nwhere 在开始时执行检测数据，对原数据进行过滤。\nhaving 对筛选出的结果再次进行过滤。\nhaving 字段必须是查询出来的，where 字段必须是数据表存在的。\nwhere 不可以使用字段的别名，having 可以。因为执行WHERE代码时，可能尚未确定列值。\nwhere 不可以使用合计函数。一般需用合计函数才会用 having\nSQL标准要求HAVING必须引用GROUP BY子句中的列或用于合计函数中的列。")]),n._v(" "),t("p",[n._v("f. order by 子句，排序子句\norder by 排序字段/别名 排序方式 [,排序字段/别名 排序方式]...\n升序：ASC，降序：DESC\n支持多个字段的排序。")]),n._v(" "),t("p",[n._v("g. limit 子句，限制结果数量子句\n仅对处理好的结果进行数量限制。将处理好的结果的看作是一个集合，按照记录出现的顺序，索引从0开始。\nlimit 起始位置, 获取条数\n省略第一个参数，表示从索引0开始。limit 获取条数")]),n._v(" "),t("p",[n._v("h. distinct, all 选项\ndistinct 去除重复记录\n默认为 all, 全部记录")]),n._v(" "),t("p",[n._v("/* UNION */ ------------------\n将多个select查询的结果组合成一个结果集合。\nSELECT ... UNION [ALL|DISTINCT] SELECT ...\n默认 DISTINCT 方式，即所有返回的行都是唯一的\n建议，对每个SELECT查询加上小括号包裹。\nORDER BY 排序时，需加上 LIMIT 进行结合。\n需要各select查询的字段数量一样。\n每个select查询的字段列表(数量、类型)应一致，因为结果中的字段名以第一条select语句为准。")]),n._v(" "),t("p",[n._v("/* 子查询 */ ------------------\n- 子查询需用括号包裹。\n-- from型\nfrom后要求是一个表，必须给子查询结果取个别名。\n- 简化每个查询内的条件。\n- from型需将结果生成一个临时表格，可用以原表的锁定的释放。\n- 子查询返回一个表，表型子查询。\nselect * from (select * from tb where id>0) as subfrom where id>1;\n-- where型\n- 子查询返回一个值，标量子查询。\n- 不需要给子查询取别名。\n- where子查询内的表，不能直接用以更新。\nselect * from tb where money = (select max(money) from tb);\n-- 列子查询\n如果子查询结果返回的是一列。\n使用 in 或 not in 完成查询\nexists 和 not exists 条件\n如果子查询返回数据，则返回1或0。常用于判断条件。\nselect column1 from t1 where exists (select * from t2);\n-- 行子查询\n查询条件是一个行。\nselect * from t1 where (id, gender) in (select id, gender from t2);\n行构造符：(col1, col2, ...) 或 ROW(col1, col2, ...)\n行构造符通常用于与对能返回两个或两个以上列的子查询进行比较。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("-- 特殊运算符\n!= all()    相当于 not in\n= some()    相当于 in。any 是 some 的别名\n!= some()    不等同于 not in，不等于其中某一个。\nall, some 可以配合其他运算符一起使用。\n")])])]),t("p",[n._v("/* 连接查询(join) */ ------------------\n将多个表的字段进行连接，可以指定连接条件。\n-- 内连接(inner join)\n- 默认就是内连接，可省略inner。\n- 只有数据存在时才能发送连接。即连接结果不能出现空行。\non 表示连接条件。其条件表达式与where类似。也可以省略条件（表示条件永远为真）\n也可用where表示连接条件。\n还有 using, 但需字段名相同。 using(字段名)")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("-- 交叉连接 cross join\n    即，没有条件的内连接。\n    select * from tb1 cross join tb2;\n")])])]),t("p",[n._v("-- 外连接(outer join)\n- 如果数据不存在，也会出现在连接结果中。\n-- 左外连接 left join\n如果数据不存在，左表记录会出现，而右表为null填充\n-- 右外连接 right join\n如果数据不存在，右表记录会出现，而左表为null填充\n-- 自然连接(natural join)\n自动判断连接条件完成连接。\n相当于省略了using，会自动查找相同字段名。\nnatural join\nnatural left join\nnatural right join")]),n._v(" "),t("p",[n._v("select info.id, info.name, info.stu_num, extra_info.hobby, extra_info.sex from info, extra_info where info.stu_num = extra_info.stu_id;")]),n._v(" "),t("p",[n._v("/* 导入导出 */ ------------------\nselect * into outfile 文件地址 [控制格式] from 表名;    -- 导出表数据\nload data [local] infile 文件地址 [replace|ignore] into table 表名 [控制格式];    -- 导入数据\n生成的数据默认的分隔符是制表符\nlocal未指定，则数据文件必须在服务器上\nreplace 和 ignore 关键词控制对现有的唯一键记录的重复的处理\n-- 控制格式\nfields    控制字段格式\n默认：fields terminated by '\\t' enclosed by '' escaped by '\\'\nterminated by 'string'    -- 终止\nenclosed by 'char'        -- 包裹\nescaped by 'char'        -- 转义\n-- 示例：\nSELECT a,b,a+b INTO OUTFILE '/tmp/result.text'\nFIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '\"'\nLINES TERMINATED BY '\\n'\nFROM test_table;\nlines    控制行格式\n默认：lines terminated by '\\n'\nterminated by 'string'    -- 终止")]),n._v(" "),t("p",[n._v("/* insert */ ------------------\nselect语句获得的数据可以用insert插入。")]),n._v(" "),t("p",[n._v("可以省略对列的指定，要求 values () 括号内，提供给了按照列顺序出现的所有字段的值。\n或者使用set语法。\ninsert into tbl_name set field=value,...；")]),n._v(" "),t("p",[n._v("可以一次性使用多个值，采用(), (), ();的形式。\ninsert into tbl_name values (), (), ();")]),n._v(" "),t("p",[n._v("可以在列值指定时，使用表达式。\ninsert into tbl_name values (field_value, 10+10, now());\n可以使用一个特殊值 default，表示该列使用默认值。\ninsert into tbl_name values (field_value, default);")]),n._v(" "),t("p",[n._v("可以通过一个查询的结果，作为需要插入的值。\ninsert into tbl_name select ...;")]),n._v(" "),t("p",[n._v("可以指定在插入的值出现主键（或唯一索引）冲突时，更新其他非主键列的信息。\ninsert into tbl_name values/set/select on duplicate key update 字段=值, …;")]),n._v(" "),t("p",[n._v("/* delete */ ------------------\nDELETE FROM tbl_name [WHERE where_definition] [ORDER BY ...] [LIMIT row_count]")]),n._v(" "),t("p",[n._v("按照条件删除")]),n._v(" "),t("p",[n._v("指定删除的最多记录数。Limit")]),n._v(" "),t("p",[n._v("可以通过排序条件删除。order by + limit")]),n._v(" "),t("p",[n._v("支持多表删除，使用类似连接语法。\ndelete from 需要删除数据多表1，表2 using 表连接操作 条件。")]),n._v(" "),t("p",[n._v("/* truncate */ ------------------\nTRUNCATE [TABLE] tbl_name\n清空数据\n删除重建表")]),n._v(" "),t("p",[n._v("区别：\n1，truncate 是删除表再创建，delete 是逐条删除\n2，truncate 重置auto_increment的值。而delete不会\n3，truncate 不知道删除了几条，而delete知道。\n4，当被用于带分区的表时，truncate 会保留分区")]),n._v(" "),t("p",[n._v("/* 备份与还原 */ ------------------\n备份，将数据的结构与表内数据保存起来。\n利用 mysqldump 指令完成。")]),n._v(" "),t("p",[n._v("-- 导出")]),n._v(" "),t("ol",[t("li",[n._v("导出一张表\n　　mysqldump -u用户名 -p密码 库名 表名 > 文件名(D:/a.sql)")]),n._v(" "),t("li",[n._v("导出多张表\n　　mysqldump -u用户名 -p密码 库名 表1 表2 表3 > 文件名(D:/a.sql)")]),n._v(" "),t("li",[n._v("导出所有表\n　　mysqldump -u用户名 -p密码 库名 > 文件名(D:/a.sql)")]),n._v(" "),t("li",[n._v("导出一个库\n　　mysqldump -u用户名 -p密码 -B 库名 > 文件名(D:/a.sql)")])]),n._v(" "),t("p",[n._v("可以-w携带备份条件")]),n._v(" "),t("p",[n._v("-- 导入")]),n._v(" "),t("ol",[t("li",[n._v("在登录mysql的情况下：\n　　source  备份文件")]),n._v(" "),t("li",[n._v("在不登录的情况下\n　　mysql -u用户名 -p密码 库名 < 备份文件")])]),n._v(" "),t("p",[n._v("/* 视图 */ ------------------\n什么是视图：\n视图是一个虚拟表，其内容由查询定义。同真实的表一样，视图包含一系列带有名称的列和行数据。但是，视图并不在数据库中以存储的数据值集形式存在。行和列数据来自由定义视图的查询所引用的表，并且在引用视图时动态生成。\n视图具有表结构文件，但不存在数据文件。\n对其中所引用的基础表来说，视图的作用类似于筛选。定义视图的筛选可以来自当前或其它数据库的一个或多个表，或者其它视图。通过视图进行查询没有任何限制，通过它们进行数据修改时的限制也很少。\n视图是存储在数据库中的查询的sql语句，它主要出于两种原因：安全原因，视图可以隐藏一些数据，如：社会保险基金表，可以用视图只显示姓名，地址，而不显示社会保险号和工资数等，另一原因是可使复杂的查询易于理解和使用。")]),n._v(" "),t("p",[n._v("-- 创建视图\nCREATE [OR REPLACE] [ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}] VIEW view_name [(column_list)] AS select_statement\n- 视图名必须唯一，同时不能与表重名。\n- 视图可以使用select语句查询到的列名，也可以自己指定相应的列名。\n- 可以指定视图执行的算法，通过ALGORITHM指定。\n- column_list如果存在，则数目必须等于SELECT语句检索的列数")]),n._v(" "),t("p",[n._v("-- 查看结构\nSHOW CREATE VIEW view_name")]),n._v(" "),t("p",[n._v("-- 删除视图\n- 删除视图后，数据依然存在。\n- 可同时删除多个视图。\nDROP VIEW [IF EXISTS] view_name ...")]),n._v(" "),t("p",[n._v("-- 修改视图结构\n- 一般不修改视图，因为不是所有的更新视图都会映射到表上。\nALTER VIEW view_name [(column_list)] AS select_statement")]),n._v(" "),t("p",[n._v("-- 视图作用\n1. 简化业务逻辑\n2. 对客户端隐藏真实的表结构")]),n._v(" "),t("p",[n._v("-- 视图算法(ALGORITHM)\nMERGE        合并\n将视图的查询语句，与外部查询需要先合并再执行！\nTEMPTABLE    临时表\n将视图执行完毕后，形成临时表，再做外层查询！\nUNDEFINED    未定义(默认)，指的是MySQL自主去选择相应的算法。")]),n._v(" "),t("p",[n._v("/* 事务(transaction) */ ------------------\n事务是指逻辑上的一组操作，组成这组操作的各个单元，要不全成功要不全失败。\n- 支持连续SQL的集体成功或集体撤销。\n- 事务是数据库在数据晚自习方面的一个功能。\n- 需要利用 InnoDB 或 BDB 存储引擎，对自动提交的特性支持完成。\n- InnoDB被称为事务安全型引擎。")]),n._v(" "),t("p",[n._v("-- 事务开启\nSTART TRANSACTION; 或者 BEGIN;\n开启事务后，所有被执行的SQL语句均被认作当前事务内的SQL语句。\n-- 事务提交\nCOMMIT;\n-- 事务回滚\nROLLBACK;\n如果部分操作发生问题，映射到事务开启前。")]),n._v(" "),t("p",[n._v("-- 事务的特性\n1. 原子性（Atomicity）\n事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。\n2. 一致性（Consistency）\n事务前后数据的完整性必须保持一致。\n- 事务开始和结束时，外部数据一致\n- 在整个事务过程中，操作是连续的\n3. 隔离性（Isolation）\n多个用户并发访问数据库时，一个用户的事务不能被其它用户的事物所干扰，多个并发事务之间的数据要相互隔离。\n4. 持久性（Durability）\n一个事务一旦被提交，它对数据库中的数据改变就是永久性的。")]),n._v(" "),t("p",[n._v("-- 事务的实现\n1. 要求是事务支持的表类型\n2. 执行一组相关的操作前开启事务\n3. 整组操作完成后，都成功，则提交；如果存在失败，选择回滚，则会回到事务开始的备份点。")]),n._v(" "),t("p",[n._v("-- 事务的原理\n利用InnoDB的自动提交(autocommit)特性完成。\n普通的MySQL执行语句后，当前的数据提交操作均可被其他客户端可见。\n而事务是暂时关闭“自动提交”机制，需要commit提交持久化数据操作。")]),n._v(" "),t("p",[n._v("-- 注意\n1. 数据定义语言（DDL）语句不能被回滚，比如创建或取消数据库的语句，和创建、取消或更改表或存储的子程序的语句。\n2. 事务不能被嵌套")]),n._v(" "),t("p",[n._v("-- 保存点\nSAVEPOINT 保存点名称 -- 设置一个事务保存点\nROLLBACK TO SAVEPOINT 保存点名称 -- 回滚到保存点\nRELEASE SAVEPOINT 保存点名称 -- 删除保存点")]),n._v(" "),t("p",[n._v("-- InnoDB自动提交特性设置\nSET autocommit = 0|1;    0表示关闭自动提交，1表示开启自动提交。\n- 如果关闭了，那普通操作的结果对其他客户端也不可见，需要commit提交后才能持久化数据操作。\n- 也可以关闭自动提交来开启事务。但与START TRANSACTION不同的是，\nSET autocommit是永久改变服务器的设置，直到下次再次修改该设置。(针对当前连接)\n而START TRANSACTION记录开启前的状态，而一旦事务提交或回滚后就需要再次开启事务。(针对当前事务)")]),n._v(" "),t("p",[n._v("/* 锁表 */\n表锁定只用于防止其它客户端进行不正当地读取和写入\nMyISAM 支持表锁，InnoDB 支持行锁\n-- 锁定\nLOCK TABLES tbl_name [AS alias]\n-- 解锁\nUNLOCK TABLES")]),n._v(" "),t("p",[n._v("/* 触发器 */ ------------------\n触发程序是与表有关的命名数据库对象，当该表出现特定事件时，将激活该对象\n监听：记录的增加、修改、删除。")]),n._v(" "),t("p",[n._v("-- 创建触发器\nCREATE TRIGGER trigger_name trigger_time trigger_event ON tbl_name FOR EACH ROW trigger_stmt\n参数：\ntrigger_time是触发程序的动作时间。它可以是 before 或 after，以指明触发程序是在激活它的语句之前或之后触发。\ntrigger_event指明了激活触发程序的语句的类型\nINSERT：将新行插入表时激活触发程序\nUPDATE：更改某一行时激活触发程序\nDELETE：从表中删除某一行时激活触发程序\ntbl_name：监听的表，必须是永久性的表，不能将触发程序与TEMPORARY表或视图关联起来。\ntrigger_stmt：当触发程序激活时执行的语句。执行多个语句，可使用BEGIN...END复合语句结构")]),n._v(" "),t("p",[n._v("-- 删除\nDROP TRIGGER [schema_name.]trigger_name")]),n._v(" "),t("p",[n._v("可以使用old和new代替旧的和新的数据\n更新操作，更新前是old，更新后是new.\n删除操作，只有old.\n增加操作，只有new.")]),n._v(" "),t("p",[n._v("-- 注意\n1. 对于具有相同触发程序动作时间和事件的给定表，不能有两个触发程序。")]),n._v(" "),t("p",[n._v("-- 字符连接函数\nconcat(str1[, str2,...])")]),n._v(" "),t("p",[n._v("-- 分支语句\nif 条件 then\n执行语句\nelseif 条件 then\n执行语句\nelse\n执行语句\nend if;")]),n._v(" "),t("p",[n._v("-- 修改最外层语句结束符\ndelimiter 自定义结束符号\nSQL语句\n自定义结束符号")]),n._v(" "),t("p",[n._v("delimiter ;        -- 修改回原来的分号")]),n._v(" "),t("p",[n._v("-- 语句块包裹\nbegin\n语句块\nend")]),n._v(" "),t("p",[n._v("-- 特殊的执行")]),n._v(" "),t("ol",[t("li",[n._v("只要添加记录，就会触发程序。")]),n._v(" "),t("li",[n._v("Insert into on duplicate key update 语法会触发：\n如果没有重复记录，会触发 before insert, after insert;\n如果有重复记录并更新，会触发 before insert, before update, after update;\n如果有重复记录但是没有发生更新，则触发 before insert, before update")]),n._v(" "),t("li",[n._v("Replace 语法 如果有记录，则执行 before insert, before delete, after delete, after insert")])]),n._v(" "),t("p",[n._v("/* SQL编程 */ ------------------")]),n._v(" "),t("p",[n._v("--// 局部变量 ----------\n-- 变量声明\ndeclare var_name[,...] type [default value]\n这个语句被用来声明局部变量。要给变量提供一个默认值，请包含一个default子句。值可以被指定为一个表达式，不需要为一个常数。如果没有default子句，初始值为null。")]),n._v(" "),t("p",[n._v("-- 赋值\n使用 set 和 select into 语句为变量赋值。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("- 注意：在函数内是可以使用全局变量（用户自定义的变量）\n")])])]),t("p",[n._v("--// 全局变量 ----------\n-- 定义、赋值\nset 语句可以定义并为变量赋值。\nset @var = value;\n也可以使用select into语句为变量初始化并赋值。这样要求select语句只能返回一行，但是可以是多个字段，就意味着同时为多个变量进行赋值，变量的数量需要与查询的列数一致。\n还可以把赋值语句看作一个表达式，通过select执行完成。此时为了避免=被当作关系运算符看待，使用:=代替。（set语句可以使用= 和 :=）。\nselect @var:=20;\nselect @v1:=id, @v2=name from t1 limit 1;\nselect * from tbl_name where @var:=30;")]),n._v(" "),t("p",[n._v("select into 可以将表中查询获得的数据赋给变量。\n-| select max(height) into @max_height from tb;")]),n._v(" "),t("p",[n._v("-- 自定义变量名\n为了避免select语句中，用户自定义的变量与系统标识符（通常是字段名）冲突，用户自定义变量在变量名前使用@作为开始符号。\n@var=10;")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("- 变量被定义后，在整个会话周期都有效（登录到退出）\n")])])]),t("p",[n._v("--// 控制结构 ----------\n-- if语句\nif search_condition then\nstatement_list"),t("br"),n._v("\n[elseif search_condition then\nstatement_list]\n...\n[else\nstatement_list]\nend if;")]),n._v(" "),t("p",[n._v("-- case语句\nCASE value WHEN [compare-value] THEN result\n[WHEN [compare-value] THEN result ...]\n[ELSE result]\nEND")]),n._v(" "),t("p",[n._v("-- while循环\n[begin_label:] while search_condition do\nstatement_list\nend while [end_label];")]),n._v(" "),t("ul",[t("li",[t("p",[n._v("如果需要在循环内提前终止 while循环，则需要使用标签；标签需要成对出现。")]),n._v(" "),t("p",[n._v("-- 退出循环\n退出整个循环 leave\n退出当前循环 iterate\n通过退出的标签决定退出哪个循环")])])]),n._v(" "),t("p",[n._v("--// 内置函数 ----------\n-- 数值函数\nabs(x)            -- 绝对值 abs(-10.9) = 10\nformat(x, d)    -- 格式化千分位数值 format(1234567.456, 2) = 1,234,567.46\nceil(x)            -- 向上取整 ceil(10.1) = 11\nfloor(x)        -- 向下取整 floor (10.1) = 10\nround(x)        -- 四舍五入去整\nmod(m, n)        -- m%n m mod n 求余 10%3=1\npi()            -- 获得圆周率\npow(m, n)        -- m^n\nsqrt(x)            -- 算术平方根\nrand()            -- 随机数\ntruncate(x, d)    -- 截取d位小数")]),n._v(" "),t("p",[n._v("-- 时间日期函数\nnow(), current_timestamp();     -- 当前日期时间\ncurrent_date();                    -- 当前日期\ncurrent_time();                    -- 当前时间\ndate('yyyy-mm-dd hh:ii:ss');    -- 获取日期部分\ntime('yyyy-mm-dd hh:ii:ss');    -- 获取时间部分\ndate_format('yyyy-mm-dd hh:ii:ss', '%d %y %a %d %m %b %j');    -- 格式化时间\nunix_timestamp();                -- 获得unix时间戳\nfrom_unixtime();                -- 从时间戳获得时间")]),n._v(" "),t("p",[n._v("-- 字符串函数\nlength(string)            -- string长度，字节\nchar_length(string)        -- string的字符个数\nsubstring(str, position [,length])        -- 从str的position开始,取length个字符\nreplace(str ,search_str ,replace_str)    -- 在str中用replace_str替换search_str\ninstr(string ,substring)    -- 返回substring首次在string中出现的位置\nconcat(string [,...])    -- 连接字串\ncharset(str)            -- 返回字串字符集\nlcase(string)            -- 转换成小写\nleft(string, length)    -- 从string2中的左边起取length个字符\nload_file(file_name)    -- 从文件读取内容\nlocate(substring, string [,start_position])    -- 同instr,但可指定开始位置\nlpad(string, length, pad)    -- 重复用pad加在string开头,直到字串长度为length\nltrim(string)            -- 去除前端空格\nrepeat(string, count)    -- 重复count次\nrpad(string, length, pad)    --在str后用pad补充,直到长度为length\nrtrim(string)            -- 去除后端空格\nstrcmp(string1 ,string2)    -- 逐字符比较两字串大小")]),n._v(" "),t("p",[n._v("-- 流程函数\ncase when [condition] then result [when [condition] then result ...] [else result] end   多分支\nif(expr1,expr2,expr3)  双分支。")]),n._v(" "),t("p",[n._v("-- 聚合函数\ncount()\nsum();\nmax();\nmin();\navg();\ngroup_concat()")]),n._v(" "),t("p",[n._v("-- 其他常用函数\nmd5();\ndefault();")]),n._v(" "),t("p",[n._v("--// 存储函数，自定义函数 ----------\n-- 新建\nCREATE FUNCTION function_name (参数列表) RETURNS 返回值类型\n函数体")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('- 函数名，应该合法的标识符，并且不应该与已有的关键字冲突。\n- 一个函数应该属于某个数据库，可以使用db_name.funciton_name的形式执行当前函数所属数据库，否则为当前数据库。\n- 参数部分，由"参数名"和"参数类型"组成。多个参数用逗号隔开。\n- 函数体由多条可用的mysql语句，流程控制，变量声明等语句构成。\n- 多条语句应该使用 begin...end 语句块包含。\n- 一定要有 return 返回值语句。\n')])])]),t("p",[n._v("-- 删除\nDROP FUNCTION [IF EXISTS] function_name;")]),n._v(" "),t("p",[n._v("-- 查看\nSHOW FUNCTION STATUS LIKE 'partten'\nSHOW CREATE FUNCTION function_name;")]),n._v(" "),t("p",[n._v("-- 修改\nALTER FUNCTION function_name 函数选项")]),n._v(" "),t("p",[n._v("--// 存储过程，自定义功能 ----------\n-- 定义\n存储存储过程 是一段代码（过程），存储在数据库中的sql组成。\n一个存储过程通常用于完成一段业务逻辑，例如报名，交班费，订单入库等。\n而一个函数通常专注与某个功能，视为其他程序服务的，需要在其他语句中调用函数才可以，而存储过程不能被其他调用，是自己执行 通过call执行。")]),n._v(" "),t("p",[n._v("-- 创建\nCREATE PROCEDURE sp_name (参数列表)\n过程体")]),n._v(" "),t("p",[n._v("参数列表：不同于函数的参数列表，需要指明参数类型\nIN，表示输入型\nOUT，表示输出型\nINOUT，表示混合型")]),n._v(" "),t("p",[n._v("注意，没有返回值。")]),n._v(" "),t("p",[n._v("/* 存储过程 */ ------------------\n存储过程是一段可执行性代码的集合。相比函数，更偏向于业务逻辑。\n调用：CALL 过程名\n-- 注意")]),n._v(" "),t("ul",[t("li",[n._v("没有返回值。")]),n._v(" "),t("li",[n._v("只能单独调用，不可夹杂在其他语句中")])]),n._v(" "),t("p",[n._v("-- 参数\nIN|OUT|INOUT 参数名 数据类型\nIN        输入：在调用过程中，将数据输入到过程体内部的参数\nOUT        输出：在调用过程中，将过程体处理完的结果返回到客户端\nINOUT    输入输出：既可输入，也可输出")]),n._v(" "),t("p",[n._v("-- 语法\nCREATE PROCEDURE 过程名 (参数列表)\nBEGIN\n过程体\nEND")]),n._v(" "),t("p",[n._v("/* 用户和权限管理 */ ------------------\n用户信息表：mysql.user\n-- 刷新权限\nFLUSH PRIVILEGES\n-- 增加用户\nCREATE USER 用户名 IDENTIFIED BY [PASSWORD] 密码(字符串)\n- 必须拥有mysql数据库的全局CREATE USER权限，或拥有INSERT权限。\n- 只能创建用户，不能赋予权限。\n- 用户名，注意引号：如 'user_name'@'192.168.1.1'\n- 密码也需引号，纯数字密码也要加引号\n- 要在纯文本中指定密码，需忽略PASSWORD关键词。要把密码指定为由PASSWORD()函数返回的混编值，需包含关键字PASSWORD\n-- 重命名用户\nRENAME USER old_user TO new_user\n-- 设置密码\nSET PASSWORD = PASSWORD('密码')    -- 为当前用户设置密码\nSET PASSWORD FOR 用户名 = PASSWORD('密码')    -- 为指定用户设置密码\n-- 删除用户\nDROP USER 用户名\n-- 分配权限/添加用户\nGRANT 权限列表 ON 表名 TO 用户名 [IDENTIFIED BY [PASSWORD] 'password']\n- all privileges 表示所有权限\n- "),t("em",[n._v(".")]),n._v(" 表示所有库的所有表\n- 库名.表名 表示某库下面的某表\n-- 查看权限\nSHOW GRANTS FOR 用户名\n-- 查看当前用户权限\nSHOW GRANTS; 或 SHOW GRANTS FOR CURRENT_USER; 或 SHOW GRANTS FOR CURRENT_USER();\n-- 撤消权限\nREVOKE 权限列表 ON 表名 FROM 用户名\nREVOKE ALL PRIVILEGES, GRANT OPTION FROM 用户名    -- 撤销所有权限\n-- 权限层级\n-- 要使用GRANT或REVOKE，您必须拥有GRANT OPTION权限，并且您必须用于您正在授予或撤销的权限。\n全局层级：全局权限适用于一个给定服务器中的所有数据库，mysql.user\nGRANT ALL ON *.*和 REVOKE ALL ON *.*只授予和撤销全局权限。\n数据库层级：数据库权限适用于一个给定数据库中的所有目标，mysql.db, mysql.host\nGRANT ALL ON db_name.*和REVOKE ALL ON db_name.*只授予和撤销数据库权限。\n表层级：表权限适用于一个给定表中的所有列，mysql.talbes_priv\nGRANT ALL ON db_name.tbl_name和REVOKE ALL ON db_name.tbl_name只授予和撤销表权限。\n列层级：列权限适用于一个给定表中的单一列，mysql.columns_priv\n当使用REVOKE时，您必须指定与被授权列相同的列。\n-- 权限列表\nALL [PRIVILEGES]    -- 设置除GRANT OPTION之外的所有简单权限\nALTER    -- 允许使用ALTER TABLE\nALTER ROUTINE    -- 更改或取消已存储的子程序\nCREATE    -- 允许使用CREATE TABLE\nCREATE ROUTINE    -- 创建已存储的子程序\nCREATE TEMPORARY TABLES        -- 允许使用CREATE TEMPORARY TABLE\nCREATE USER        -- 允许使用CREATE USER, DROP USER, RENAME USER和REVOKE ALL PRIVILEGES。\nCREATE VIEW        -- 允许使用CREATE VIEW\nDELETE    -- 允许使用DELETE\nDROP    -- 允许使用DROP TABLE\nEXECUTE        -- 允许用户运行已存储的子程序\nFILE    -- 允许使用SELECT...INTO OUTFILE和LOAD DATA INFILE\nINDEX     -- 允许使用CREATE INDEX和DROP INDEX\nINSERT    -- 允许使用INSERT\nLOCK TABLES        -- 允许对您拥有SELECT权限的表使用LOCK TABLES\nPROCESS     -- 允许使用SHOW FULL PROCESSLIST\nREFERENCES    -- 未被实施\nRELOAD    -- 允许使用FLUSH\nREPLICATION CLIENT    -- 允许用户询问从属服务器或主服务器的地址\nREPLICATION SLAVE    -- 用于复制型从属服务器（从主服务器中读取二进制日志事件）\nSELECT    -- 允许使用SELECT\nSHOW DATABASES    -- 显示所有数据库\nSHOW VIEW    -- 允许使用SHOW CREATE VIEW\nSHUTDOWN    -- 允许使用mysqladmin shutdown\nSUPER    -- 允许使用CHANGE MASTER, KILL, PURGE MASTER LOGS和SET GLOBAL语句，mysqladmin debug命令；允许您连接（一次），即使已达到max_connections。\nUPDATE    -- 允许使用UPDATE\nUSAGE    -- “无权限”的同义词\nGRANT OPTION    -- 允许授予权限")]),n._v(" "),t("p",[n._v("/* 表维护 */\n-- 分析和存储表的关键字分布\nANALYZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE 表名 ...\n-- 检查一个或多个表是否有错误\nCHECK TABLE tbl_name [, tbl_name] ... [option] ...\noption = {QUICK | FAST | MEDIUM | EXTENDED | CHANGED}\n-- 整理数据文件的碎片\nOPTIMIZE [LOCAL | NO_WRITE_TO_BINLOG] TABLE tbl_name [, tbl_name] ...")]),n._v(" "),t("p",[n._v("/* 杂项 */ ------------------")]),n._v(" "),t("ol",[t("li",[n._v("可用反引号（`）为标识符（库名、表名、字段名、索引、别名）包裹，以避免与关键字重名！中文也可以作为标识符！")]),n._v(" "),t("li",[n._v("每个库目录存在一个保存当前数据库的选项文件db.opt。")]),n._v(" "),t("li",[n._v("注释：\n单行注释 # 注释内容\n多行注释 /* 注释内容 */\n单行注释 -- 注释内容        (标准SQL注释风格，要求双破折号后加一空格符（空格、TAB、换行等）)")]),n._v(" "),t("li",[n._v("模式通配符：\n_    任意单个字符\n%    任意多个字符，甚至包括零字符\n单引号需要进行转义 '")]),n._v(" "),t("li",[n._v('CMD命令行内的语句结束符可以为 ";", "\\G", "\\g"，仅影响显示结果。其他地方还是用分号结束。delimiter 可修改当前对话的语句结束符。')]),n._v(" "),t("li",[n._v("SQL对大小写不敏感")]),n._v(" "),t("li",[n._v("清除已有语句：\\c")])])])}),[],!1,null,null,null);e.default=a.exports}}]);