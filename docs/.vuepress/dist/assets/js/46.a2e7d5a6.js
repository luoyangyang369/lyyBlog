(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{543:function(t,e,a){"use strict";a.r(e);var v=a(6),r=Object(v.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("Java 集合类、接口、抽象类介绍\n")]),t._v(" "),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://c.biancheng.net/java/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java教程"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.zhihu.com/question/31203609",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 到底是值传递还是引用传递？"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://lingcoder.github.io/OnJava8/#/",target:"_blank",rel:"noopener noreferrer"}},[t._v("《On Java 8》中文版"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://wizardforcel.gitbooks.io/thinking-in-java/content/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 编程思想"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://snailclimb.gitee.io/springboot-guide/#/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Boot 指南"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://adjava.netlify.app/#/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java工程师进阶知识"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://jdk8_api.dev.jcstaff.club/",target:"_blank",rel:"noopener noreferrer"}},[t._v("标准版的API规范"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/Snailclimb/JavaGuide/blob/3965c02cc0f294b0bd3580df4868d5e396959e2e/Java%E7%9B%B8%E5%85%B3/%E5%8F%AF%E8%83%BD%E6%98%AF%E6%8A%8AJava%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E8%AE%B2%E7%9A%84%E6%9C%80%E6%B8%85%E6%A5%9A%E7%9A%84%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("可能是把Java内存区域讲的最清楚的一篇文章"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/Blue-Keroro/p/8875898.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java泛型详解"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://cloud.tencent.com/developer/article/1033693",target:"_blank",rel:"noopener noreferrer"}},[t._v("泛型面试题"),a("OutboundLink")],1)])]),t._v(" "),a("h4",{attrs:{id:"java-到底是值传递还是引用传递"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-到底是值传递还是引用传递"}},[t._v("#")]),t._v(" Java 到底是值传递还是引用传递？")]),t._v(" "),a("p",[t._v("首先回顾一下在程序设计语言中有关将参数传递给方法(或函数)的一些专业术语。按值调用(call by value)表示方法接收的是调用者提供的值, 而按引用调用(call by reference)表示方法接收的是调用者提供的变量地址。一个方法可以修改传递引用所对应的变量值, 而不能修改传递值调用所对应的变量值。 它用来描述各种程序设计语言(不只是 Java)中方法参数传递方式。")]),t._v(" "),a("p",[t._v("Java 程序设计语言总是采用按值调用。也就是说, 方法得到的是所有参数值的一个拷贝, 也就是说, 方法不能修改传递给它的任何参数变量的内容。")]),t._v(" "),a("p",[t._v("java都是“值传递”即可,  关键看这个值是什么, 简单变量就是复制了具值, 引用变量就是复制了地址呗。字符串是不可变的")]),t._v(" "),a("h2",{attrs:{id:"修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[t._v("#")]),t._v(" 修饰符")]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/xiushifu.png",alt:"修饰符"}})]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("关键字")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("用处")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("含义")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("备注")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("void")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("方法前")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("函数无返回值")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}})])])]),t._v(" "),a("h2",{attrs:{id:"规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#规范"}},[t._v("#")]),t._v(" 规范")]),t._v(" "),a("p",[t._v("每个 java 源文件中允许有多个类。同时,  "),a("em",[t._v("源文件的名称必须要和其中一个类名相同")]),t._v(", , 否则编译器将会报错。每个独立的程序应该包含一个 "),a("code",[t._v("main()")]),t._v(" 方法作为程序运行的入口。其方法签名和返回类型如下。代码示例:")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("blockquote",[a("p",[t._v("运行 Java 程序")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("javac hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("java\njava hello\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h2",{attrs:{id:"语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[t._v("#")]),t._v(" 语法")]),t._v(" "),a("ul",[a("li",[t._v("equals() 的默认行为是比较对象的引用而非具体内容")]),t._v(" "),a("li",[t._v("布尔表达式 ? 值 1 : 值 2\n若表达式计算为 true,  则返回结果 值 1 ;如果表达式的计算为 false, 则返回结果 值 2。")])]),t._v(" "),a("h2",{attrs:{id:"重写与重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重写与重载"}},[t._v("#")]),t._v(" 重写与重载")]),t._v(" "),a("blockquote",[a("blockquote",[a("p",[t._v("重载就是同样的一个方法能够根据输入数据的不同, 做出不同的处理")])])]),t._v(" "),a("blockquote",[a("blockquote",[a("p",[t._v("重写就是当子类继承自父类的相同方法, 输入数据一样, 但要做出有别于父类的响应时, 你就要覆盖父类方法")])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("区别点")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("重载方法")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("重写方法")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("发生范围")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("同一个类")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("子类")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("参数列表")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("必须修改")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("一定不能修改")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("返回类型")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("可修改")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("子类方法返回值类型应比父类方法返回值类型更小或相等")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("异常")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("可修改")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等;")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("访问修饰符")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("可修改")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("一定不能做更严格的限制(可以降低限制)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("发生阶段")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("编译期")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("运行期")])])])]),t._v(" "),a("h3",{attrs:{id:"重写-override"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重写-override"}},[t._v("#")]),t._v(" 重写(Override)")]),t._v(" "),a("p",[t._v("方法的重写要遵循“两同两小一大”")]),t._v(" "),a("ul",[a("li",[t._v("“两同”即方法名相同、形参列表相同;")]),t._v(" "),a("li",[t._v("“两小”指的是子类方法返回值类型应比父类方法返回值类型更小或相等, 子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等;")]),t._v(" "),a("li",[t._v("“一大”指的是子类方法的访问权限应比父类方法的访问权限更大或相等。")])]),t._v(" "),a("p",[t._v("⭐️ 关于 重写的返回值类型 这里需要额外多说明一下, 上面的表述不太清晰准确:如果方法的返回类型是void和基本数据类型, 则返回值重写时不可修改。但是如果方法的返回值是引用类型, 重写时是可以返回该引用类型的子类的。")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("@Override")]),t._v(" 注解, 可以让编译器帮忙检查是否满足上面的三个限制条件。")]),t._v(" "),a("h3",{attrs:{id:"重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重载"}},[t._v("#")]),t._v(" 重载")]),t._v(" "),a("p",[t._v("方法的重载( overload )是指一个类中可以定义多 个方法名相同,但参数不同的方法。调用时 ,会根据不同的参数自动匹配对应的方法。")]),t._v(" "),a("blockquote",[a("p",[t._v("重载规则:")])]),t._v(" "),a("ul",[a("li",[t._v("被重载的方法必须改变参数列表(参数个数或类型不- -样) ;")]),t._v(" "),a("li",[t._v("被重载的方法可以改变返回类型;")]),t._v(" "),a("li",[t._v("被重载的方法可以改变访问修饰符;")]),t._v(" "),a("li",[t._v("被重载的方法可以声明新的或更广的检查异常;")]),t._v(" "),a("li",[t._v("方法能够在同一个类中或者在一个子类中被重载;")]),t._v(" "),a("li",[t._v("无法以返回值类型作为重载函数的区分标准;")])]),t._v(" "),a("h2",{attrs:{id:"类与对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类与对象"}},[t._v("#")]),t._v(" 类与对象")]),t._v(" "),a("h3",{attrs:{id:"构造函数的概念与特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数的概念与特点"}},[t._v("#")]),t._v(" 构造函数的概念与特点")]),t._v(" "),a("p",[t._v("在类的对象创建时定义初始化的状态,和类名称相同的无返回值函数")]),t._v(" "),a("blockquote",[a("p",[t._v("特点:")])]),t._v(" "),a("ul",[a("li",[t._v("对象方法不能调用构造方法")]),t._v(" "),a("li",[t._v("构造函数的函数名要与类名-样:类名(形参类型形参){}")]),t._v(" "),a("li",[t._v("构造函数在实例化的时候就会被调用, 实例化一次调用一 次")]),t._v(" "),a("li",[t._v("构造函数调用必须是构造函数中的第一个语句\n注意:在构造函数中可以调用本类的其他重载构造函数,不能使用构造函数名称来调用另一个构造函\n数,而是使用hi...)来调用")]),t._v(" "),a("li",[t._v("构造函数可以被重载, 但不能重写")]),t._v(" "),a("li",[t._v("构造函数用于初始化参数")]),t._v(" "),a("li",[t._v("构造函数没有返回值,因此也没有类型,作用只是对对象进行初始化")])]),t._v(" "),a("h2",{attrs:{id:"继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),a("h3",{attrs:{id:"继承的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承的概念"}},[t._v("#")]),t._v(" 继承的概念")]),t._v(" "),a("ul",[a("li",[t._v("通过继承可以使得子类访问父类的非私有成员变量以及成员方法(但不能选择性地继承\n父类) ,可以增加新的数据或新的功能,还可以对父类中原有的方法进行覆盖重写;这\n样可以增强代码的复用性,提高了代码的可维护性")]),t._v(" "),a("li",[t._v("java中继承只能单父类继承")]),t._v(" "),a("li",[t._v("extends 表示继承")])]),t._v(" "),a("h3",{attrs:{id:"构造函数的继承与执行顺序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数的继承与执行顺序"}},[t._v("#")]),t._v(" 构造函数的继承与执行顺序")]),t._v(" "),a("ul",[a("li",[t._v("如果一个类没有任何显式创建的构造器则该类默认会有一个无参构造器;如果显式创建了有参构\n造器则该类就不再有默认无参构造器")]),t._v(" "),a("li",[t._v("在Java继承中,构造器并不能被继承,而是被显式或隐式调用。")]),t._v(" "),a("li",[t._v("子类的构造方法中必须调用其基类的构造方法(显式或隐式)")])]),t._v(" "),a("p",[t._v("1、 若在子类构造方法中没有显式调用,系统在子类构造方法开始自动隐式调用父类的无参数构造方法\nsuper()。因此若此时父类中没有无参数构造器则会编译出错")]),t._v(" "),a("p",[t._v("2、 若是显式调用,则可以通过super(argument_ list) 来调用,且super调用必须在首行以保证子类对象从\n所有直接或间接父类中继承的实例变量都被正确地初始化( this关键字可以调用本类中的其他构造器,也必\n须在首句, 因此this和super没法同时用)")]),t._v(" "),a("blockquote",[a("p",[t._v("父类静态代码块--\x3e子类静态代码块--\x3e 父类构造函数--\x3e子类构造函数")])]),t._v(" "),a("h3",{attrs:{id:"子类重写父类的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子类重写父类的方法"}},[t._v("#")]),t._v(" 子类重写父类的方法")]),t._v(" "),a("p",[t._v("有时父类提供的方法会出现在子类中不适用的情况,此时就可以通过重写父类的方法来解决问题")]),t._v(" "),a("blockquote",[a("blockquote",[a("p",[t._v("注意事项")])])]),t._v(" "),a("ul",[a("li",[t._v("父类中的方法在子类中必须可见,即子类继承了父类中的该方法(可以显式的使用super关键字\n来访问父类中的被重写的方法) , 如果父类中的方法为private类型的,那么子类虽能继承,但\n无法覆盖")]),t._v(" "),a("li",[t._v("子类和父类的方法必须是实例方法,如果父类是static方法而子类是实例方法,或者相反都会报,\n错。如果父类和子类都是static 方法,那么子类隐藏父类的方法,而不是重写父类方法")]),t._v(" "),a("li",[t._v("子类和父类的方法必须要具有相同的函数名称、参数列表,并且子类方法的返回值与父类相同或\n者是父类返回类型的子类型")]),t._v(" "),a("li",[t._v("子类方法的访问权限应该等于或大于父类方法的访问权限(可以具有相同的访问权限或者子类的\n访问权限大于父类)。访问权限由高到低: public、protected、 包访问权限、private。 如果子\n类方法的访问权限低于父类,则编译器会给出错误信息")]),t._v(" "),a("li",[t._v("子类方法不能比父类方法抛出更多的编译时异常(不是运行时异常) ,即子类方法抛出的编译时\n异常或者和父类相同或者是父类异常的子类。当然,子类也可以不抛出异常,或者抛出\nRuntimeException异常")])]),t._v(" "),a("h2",{attrs:{id:"组合和继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合和继承"}},[t._v("#")]),t._v(" 组合和继承")]),t._v(" "),a("ul",[a("li",[t._v("“组合”(Composition)")])]),t._v(" "),a("p",[t._v("已经被多次使用。你仅需要把对象的引用(object references)放置在一个新的类里, 这就使用了组合。")]),t._v(" "),a("ul",[a("li",[t._v("“继承”(Inheritance)\n采用现有类形式, 又无需在编码时改动其代码")])]),t._v(" "),a("h2",{attrs:{id:"interface-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interface-接口"}},[t._v("#")]),t._v(" interface(接口)")]),t._v(" "),a("h3",{attrs:{id:"接口定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口定义"}},[t._v("#")]),t._v(" 接口定义")]),t._v(" "),a("p",[t._v("接口就是一个规范和抽象类比较相似。它只管做什么,不管怎么做。通俗的讲,接口就是某个事物对外提供的一\n些功能的声明,其定义和类比较相似,只不过是通过interface关键字来完成")]),t._v(" "),a("h3",{attrs:{id:"知识点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#知识点"}},[t._v("#")]),t._v(" 知识点")]),t._v(" "),a("ul",[a("li",[t._v("接口中的所有属性默认为: public static final *** (属性不能够被更改) ;")]),t._v(" "),a("li",[t._v("接口中的所有方法默认为: public abstract **** (方法默认为抽象方法,实现类必须去重写接口中的方法) ;")]),t._v(" "),a("li",[t._v("接口不再像类-样用关键字extends去“继承”, 而是用implements去“实现”, 也就是说类和接口的关系\n叫做实现")])]),t._v(" "),a("h3",{attrs:{id:"接口实现的注意点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口实现的注意点"}},[t._v("#")]),t._v(" 接口实现的注意点")]),t._v(" "),a("ul",[a("li",[t._v("实现一个接口就是要实现该接口的所有的方法(抽象类除外)。")]),t._v(" "),a("li",[t._v("接口中的方法都是抽象的。")]),t._v(" "),a("li",[t._v("多个无关的类可以实现同一个接口, 一个类可以实现多个无关的接口。")])]),t._v(" "),a("h3",{attrs:{id:"extends与implements的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extends与implements的区别"}},[t._v("#")]),t._v(" extends与implements的区别")]),t._v(" "),a("p",[t._v("extends 是继承父类, 只要那个类不是声明为final或者那个类定义为abstract的就能继承, JAVA中不支持多重继承, 但是可以用接口来实现, 这样就用到了implements, 继承只能继承一个类, 但implements可以实现多个接口, 用逗号分开就行了。")]),t._v(" "),a("h2",{attrs:{id:"抽象类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象类"}},[t._v("#")]),t._v(" 抽象类")]),t._v(" "),a("h3",{attrs:{id:"抽象类定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象类定义"}},[t._v("#")]),t._v(" 抽象类定义")]),t._v(" "),a("ul",[a("li",[t._v("abstract修饰的类为抽象类,此类不能有对象, (无法对此类进行实例化,说白了就是不能new)")]),t._v(" "),a("li",[t._v("abstract修饰的方法为抽象方法,此方法不能有方法体")])]),t._v(" "),a("h3",{attrs:{id:"知识点-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#知识点-2"}},[t._v("#")]),t._v(" 知识点")]),t._v(" "),a("ul",[a("li",[t._v("抽象类不能有对象,不能用new此关键字来创建抽象类的对象;")]),t._v(" "),a("li",[t._v("有抽象方法的类一定是抽象类,但是抽象类中不一定有抽象方法 ;")]),t._v(" "),a("li",[t._v("抽象类中的抽象方法必须在子类中被重写。")])]),t._v(" "),a("h2",{attrs:{id:"接口与抽象类对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口与抽象类对比"}},[t._v("#")]),t._v(" 接口与抽象类对比")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("abstract class")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("interface")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("定义")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("关键字abstract 修饰的类")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("关键字interface修饰")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("继承")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("抽象类可以继承一个类和实现多个接口(单继承, 多实现), 子类只可以继承一个抽象类")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("接口只可以继承接口(-个或者多个) ;子类可以实现多个接口")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("访问修饰符")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("抽象类可以有public. protected 和default 这些修饰符(要保证子类可以继承父类)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("接口只能是public (要保证类的实现)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("方法实现")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("可以定义构造方法, 可以有抽象方法和具体方法")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("接口是抽象的, 没有构造方法, 且方法都默认是抽象方法, 但在jdk1.8,接口中的方法可以具体实现, 用default关键字。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("实现方法")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("子类使用extends关键字来继承抽象类。如果子类不是抽象类的话, 它需要提供抽象类中所有声明的方法的实现")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("子类使用implements来实现接口, 子类需要提供接口中所有声明的方法的实现")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("作用")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("把相同的东西提取出来, 即重用")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("把程序模块进行固化的契约, 降低耦合")])])])])])}),[],!1,null,null,null);e.default=r.exports}}]);