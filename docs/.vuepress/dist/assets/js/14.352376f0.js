(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{509:function(e,_,t){"use strict";t.r(_);var v=t(6),l=Object(v.a)({},(function(){var e=this,_=e.$createElement,t=e._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),t("p",[e._v("-"),t("a",{attrs:{href:"https://imageslr.com/2020/02/27/select-poll-epoll.html#poll",target:"_blank",rel:"noopener noreferrer"}},[e._v("I/O 多路复用，select / poll / epoll 详解"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"从阻塞-i-o-到-i-o-多路复用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从阻塞-i-o-到-i-o-多路复用"}},[e._v("#")]),e._v(" 从阻塞 I/O 到 I/O 多路复用")]),e._v(" "),t("p",[e._v("阻塞 I/O，是指进程发起调用后，会被挂起（阻塞），直到收到数据再返回。如果调用一直不返回，进程就会一直被挂起。因此，当使用阻塞 I/O 时，需要使用多线程来处理多个文件描述符。")]),e._v(" "),t("p",[e._v("多线程切换有一定的开销，因此引入非阻塞 I/O。非阻塞 I/O 不会将进程挂起，调用时会立即返回成功或错误，因此可以在一个线程里轮询多个文件描述符是否就绪。")]),e._v(" "),t("p",[e._v("但是非阻塞 I/O 的缺点是：每次发起系统调用，只能检查一个文件描述符是否就绪。当文件描述符很多时，系统调用的成本很高。")]),e._v(" "),t("p",[e._v("因此引入了 I/O 多路复用，可以通过一次系统调用，检查多个文件描述符的状态。这是 I/O 多路复用的主要优点，相比于非阻塞 I/O，在文件描述符较多的场景下，避免了频繁的用户态和内核态的切换，减少了系统调用的开销。")]),e._v(" "),t("blockquote",[t("p",[e._v("I/O 多路复用相当于将「遍历所有文件描述符、通过非阻塞 I/O 查看其是否就绪」的过程从用户线程移到了内核中，由内核来负责轮询。")])]),e._v(" "),t("p",[e._v("进程可以通过 select、poll、epoll 发起 I/O 多路复用的系统调用，这些系统调用都是同步阻塞的："),t("strong",[e._v("如果传入的多个文件描述符中，有描述符就绪，则返回就绪的描述符；否则如果所有文件描述符都未就绪，就阻塞调用进程，直到某个描述符就绪，或者阻塞时长超过设置的 timeout 后，再返回。")]),e._v(" 使用非阻塞 I/O 检查每个描述符的就绪状态。")]),e._v(" "),t("p",[e._v("如果 "),t("code",[e._v("timeout")]),e._v(" 参数设为 NULL，会无限阻塞直到某个描述符就绪；如果 "),t("code",[e._v("timeout")]),e._v(" 参数设为 0，会立即返回，不阻塞。")]),e._v(" "),t("p",[e._v("I/O 多路复用引入了一些额外的操作和开销，性能更差。但是好处是用户可以在一个线程内同时处理多个 I/O 请求。如果不采用 I/O 多路复用，则必须通过多线程的方式，每个线程处理一个 I/O 请求。后者线程切换也是有一定的开销的。这部分内容可以查看最下文 "),t("code",[e._v("Redis 的线程模型")]),e._v("。")]),e._v(" "),t("h2",{attrs:{id:"为什么-i-o-多路复用内部需要使用非阻塞-i-o"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么-i-o-多路复用内部需要使用非阻塞-i-o"}},[e._v("#")]),e._v(" 为什么 I/O 多路复用内部需要使用非阻塞 I/O")]),e._v(" "),t("p",[e._v("I/O 多路复用"),t("code",[e._v("内部")]),e._v("会遍历集合中的每个文件描述符，判断其是否就绪：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("for fd in read_set\n    if（ readable(fd) ) // 判断 fd 是否就绪\n        count++\n        FDSET(fd, &res_rset) // 将 fd 添加到就绪集合中\n        break\n...\nreturn count\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])]),t("p",[e._v("这里的 readable(fd) 就是一个非阻塞 I/O 调用。试想，如果这里使用阻塞 I/O，那么 fd 未就绪时，select 会阻塞在这个文件描述符上，无法检查下个文件描述符。")]),e._v(" "),t("p",[e._v("注意：这里说的是 I/O 多路复用的内部实现，而不是说，使用 I/O 多路复用就必须使用非阻塞 I/O，见下文 "),t("code",[e._v("为什么边缘触发必须使用非阻塞 I/O")]),e._v("。")]),e._v(" "),t("h2",{attrs:{id:"select"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#select"}},[e._v("#")]),e._v(" select")]),e._v(" "),t("h3",{attrs:{id:"函数签名与参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数签名与参数"}},[e._v("#")]),e._v(" 函数签名与参数")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("int select(int nfds,\n            fd_set *restrict readfds,\n            fd_set *restrict writefds,\n            fd_set *restrict errorfds,\n            struct timeval *restrict timeout);\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("p",[t("code",[e._v("readfds")]),e._v("、"),t("code",[e._v("writefds")]),e._v("、"),t("code",[e._v("errorfds")]),e._v(" 是三个文件描述符集合。"),t("code",[e._v("select")]),e._v(" 会遍历每个集合的前 "),t("code",[e._v("nfds")]),e._v(" 个描述符，分别找到可以读取、可以写入、发生错误的描述符，统称为“就绪”的描述符。然后用找到的子集替换参数中的对应集合，返回所有就绪描述符的总数。")]),e._v(" "),t("p",[t("code",[e._v("timeout")]),e._v(" 参数表示调用 "),t("code",[e._v("select")]),e._v(" 时的阻塞时长。如果所有文件描述符都未就绪，就阻塞调用进程，直到某个描述符就绪，或者阻塞超过设置的 "),t("code",[e._v("timeout")]),e._v(" 后，返回。如果 "),t("code",[e._v("timeout")]),e._v(" 参数设为 NULL，会无限阻塞直到某个描述符就绪；如果 "),t("code",[e._v("timeout")]),e._v(" 参数设为 0，会立即返回，不阻塞。")]),e._v(" "),t("h3",{attrs:{id:"什么是文件描述符-fd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是文件描述符-fd"}},[e._v("#")]),e._v(" 什么是文件描述符 fd")]),e._v(" "),t("p",[t("code",[e._v("文件描述符（file descriptor）")]),e._v("是一个非负整数，从 0 开始。进程使用文件描述符来标识一个打开的文件。")]),e._v(" "),t("p",[e._v("系统为每一个进程维护了一个文件描述符表，表示该进程打开文件的记录表，而"),t("strong",[e._v("文件描述符实际上就是这张表的索引")]),e._v("。当进程打开（open）或者新建（create）文件时，内核会在该进程的文件列表中新增一个表项，同时返回一个文件描述符 —— 也就是新增表项的下标。")]),e._v(" "),t("p",[e._v("一般来说，每个进程最多可以打开 64 个文件，fd ∈ 0~63。在不同系统上，最多允许打开的文件个数不同，Linux 2.4.22 强制规定最多不能超过 1,048,576。")]),e._v(" "),t("p",[e._v("每个进程默认都有 3 个文件描述符：0 (stdin)、1 (stdout)、2 (stderr)。")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/labuladong/fucking-algorithm/blob/master/%E6%8A%80%E6%9C%AF/linux%E8%BF%9B%E7%A8%8B.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("这篇文章"),t("OutboundLink")],1),e._v("以图示的方式对文件描述符作了深入地讲解，可以进一步阅读。")]),e._v(" "),t("h3",{attrs:{id:"socket-与-fd-的关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#socket-与-fd-的关系"}},[e._v("#")]),e._v(" socket 与 fd 的关系")]),e._v(" "),t("p",[e._v("socket 是 Unix 中的术语。socket 可以用于同一台主机的不同进程间的通信，也可以用于不同主机间的通信。一个 socket 包含地址、类型和通信协议等信息，通过 socket() 函数创建：")]),e._v(" "),t("p",[t("code",[e._v("int socket(int domain, int type, int protocol)")])]),e._v(" "),t("p",[e._v("返回的就是这个 socket 对应的文件描述符 fd。操作系统将 socket 映射到进程的一个文件描述符上，进程就可以通过读写这个文件描述符来和远程主机通信。")]),e._v(" "),t("p",[e._v("可以这样理解：socket 是进程间通信规则的高层抽象，而 fd 提供的是底层的具体实现。socket 与 fd 是一一对应的。通过 socket 通信，实际上就是通过文件描述符 fd 读写文件。这也符合 Unix“一切皆文件”的哲学。")]),e._v(" "),t("p",[e._v("后面可以将 socket 和 fd 视为同义词。")]),e._v(" "),t("h2",{attrs:{id:"fd-set-文件描述符集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fd-set-文件描述符集合"}},[e._v("#")]),e._v(" fd_set 文件描述符集合")]),e._v(" "),t("p",[e._v("参数中的 "),t("code",[e._v("fd_set")]),e._v(" 类型表示文件描述符的集合。")]),e._v(" "),t("p",[e._v("由于文件描述符 "),t("code",[e._v("fd")]),e._v(" 是一个从 0 开始的无符号整数，所以可以使用 "),t("code",[e._v("fd_set")]),e._v(" 的二进制每一位来表示一个文件描述符。某一位为 1，表示对应的文件描述符已就绪。比如比如设 "),t("code",[e._v("fd_set")]),e._v(" 长度为 1 字节，则一个 "),t("code",[e._v("fd_set")]),e._v(" 变量最大可以表示 8 个文件描述符。当 "),t("code",[e._v("select")]),e._v(" 返回 "),t("code",[e._v("fd_set = 00010011")]),e._v(" 时，表示文件描述符 1、2、5 已经就绪。")]),e._v(" "),t("p",[e._v("fd_set 的使用涉及以下几个 API：")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#include <sys/select.h>   \nint FD_ZERO(int fd, fd_set *fdset);  // 将 fd_set 所有位置 0\nint FD_CLR(int fd, fd_set *fdset);   // 将 fd_set 某一位置 0\nint FD_SET(int fd, fd_set *fd_set);  // 将 fd_set 某一位置 1\nint FD_ISSET(int fd, fd_set *fdset); // 检测 fd_set 某一位是否为 1\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br")])]),t("h3",{attrs:{id:"select-使用示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#select-使用示例"}},[e._v("#")]),e._v(" select 使用示例")]),e._v(" "),t("p",[e._v("下图的代码说明：")]),e._v(" "),t("ol",[t("li",[e._v("先声明一个 fd_set 类型的变量 readFDs")]),e._v(" "),t("li",[e._v("调用 FD_ZERO，将 readFDs 所有位置 0")]),e._v(" "),t("li",[e._v("调用 FD_SET，将 readFDs 感兴趣的位置 1，表示要监听这几个文件描述符")]),e._v(" "),t("li",[e._v("将 readFDs 传给 select，调用 select")]),e._v(" "),t("li",[e._v("select 会将 readFDs 中就绪的位置 1，未就绪的位置 0，返回就绪的文件描述符的数量")]),e._v(" "),t("li",[e._v("当 select 返回后，调用 FD_ISSET 检测给定位是否为 1，表示对应文件描述符是否就绪")])]),e._v(" "),t("p",[e._v("比如进程想监听 1、2、5 这三个文件描述符，就将 "),t("code",[e._v("readFDs")]),e._v(" 设置为 00010011，然后调用 "),t("code",[e._v("select")]),e._v("。")]),e._v(" "),t("p",[e._v("如果 fd=1、fd=2 就绪，而 fd=5 未就绪，select 会将 "),t("code",[e._v("readFDs")]),e._v(" 设置为 00000011 并返回 2。")]),e._v(" "),t("p",[e._v("如果每个文件描述符都未就绪，select 会阻塞 timeout 时长，再返回。这期间，如果 "),t("code",[e._v("readFDs")]),e._v(" 监听的某个文件描述符上发生可读事件，则 select 会将对应位置 1，并立即返回。")]),e._v(" "),t("h3",{attrs:{id:"select-的缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#select-的缺点"}},[e._v("#")]),e._v(" select 的缺点")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("性能开销大")]),e._v(" "),t("ol",[t("li",[e._v("调用 "),t("code",[e._v("select")]),e._v(" 时会陷入内核，这时需要将参数中的 "),t("code",[e._v("fd_set")]),e._v(" 从用户空间拷贝到内核空间")]),e._v(" "),t("li",[e._v("内核需要遍历传递进来的所有 "),t("code",[e._v("fd_set")]),e._v(" 的每一位，不管它们是否就绪")])])]),e._v(" "),t("li",[t("p",[e._v("同时能够监听的文件描述符数量太少。受限于 "),t("code",[e._v("sizeof(fd_set)")]),e._v(" 的大小，在编译内核时就确定了且无法更改。一般是 1024，不同的操作系统不相同")])])]),e._v(" "),t("h2",{attrs:{id:"poll"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#poll"}},[e._v("#")]),e._v(" poll")]),e._v(" "),t("p",[e._v("poll 和 select 几乎没有区别。poll 采用链表的方式存储文件描述符，没有最大存储数量的限制。")]),e._v(" "),t("p",[e._v("从性能开销上看，poll 和 select 的差别不大。")]),e._v(" "),t("h2",{attrs:{id:"epoll"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#epoll"}},[e._v("#")]),e._v(" epoll")]),e._v(" "),t("p",[e._v("epoll 是对 select 和 poll 的改进，避免了“性能开销大”和“文件描述符数量少”两个缺点。")]),e._v(" "),t("p",[e._v("简而言之，epoll 有以下几个特点：")]),e._v(" "),t("ul",[t("li",[e._v("使用"),t("strong",[e._v("红黑树")]),e._v("存储文件描述符集合")]),e._v(" "),t("li",[e._v("使用"),t("strong",[e._v("队列")]),e._v("存储就绪的文件描述符")]),e._v(" "),t("li",[e._v("每个文件描述符只需在添加时传入一次；通过事件更改文件描述符状态")])]),e._v(" "),t("p",[e._v("select、poll 模型都只使用一个函数，而 epoll 模型使用三个函数："),t("code",[e._v("epoll_create")]),e._v("、"),t("code",[e._v("epoll_ctl")]),e._v(" 和 "),t("code",[e._v("epoll_wait")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"epoll-create"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#epoll-create"}},[e._v("#")]),e._v(" epoll_create")]),e._v(" "),t("blockquote",[t("p",[e._v("int epoll_create(int size);\n"),t("code",[e._v("epoll_create")]),e._v(" 会创建一个 "),t("code",[e._v("epoll")]),e._v(" 实例，同时返回一个引用该实例的文件描述符。")])]),e._v(" "),t("p",[e._v("返回的文件描述符仅仅指向对应的 "),t("code",[e._v("epoll")]),e._v(" 实例，并不表示真实的磁盘文件节点。其他 API 如 "),t("code",[e._v("epoll_ctl")]),e._v("、"),t("code",[e._v("epoll_wait")]),e._v(" 会使用这个文件描述符来操作相应的 "),t("code",[e._v("epoll")]),e._v(" 实例。")]),e._v(" "),t("p",[e._v("当创建好 "),t("code",[e._v("epoll")]),e._v(" 句柄后，它会占用一个 fd 值，在 linux 下查看 /proc/进程id/fd/，就能够看到这个 fd。所以在使用完 "),t("code",[e._v("epoll")]),e._v(" 后，必须调用 close(epfd) 关闭对应的文件描述符，否则可能导致 fd 被耗尽。当指向同一个 "),t("code",[e._v("epoll")]),e._v(" 实例的所有文件描述符都被关闭后，操作系统会销毁这个 "),t("code",[e._v("epoll")]),e._v(" 实例。")]),e._v(" "),t("p",[t("code",[e._v("epoll")]),e._v(" 实例内部存储：")]),e._v(" "),t("ul",[t("li",[e._v("监听列表：所有要监听的文件描述符，使用红黑树")]),e._v(" "),t("li",[e._v("就绪列表：所有就绪的文件描述符，使用链表")])]),e._v(" "),t("h3",{attrs:{id:"epoll-ctl"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#epoll-ctl"}},[e._v("#")]),e._v(" epoll_ctl")]),e._v(" "),t("blockquote",[t("p",[e._v("int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);")])]),e._v(" "),t("p",[e._v("epoll_ctl 会监听文件描述符 fd 上发生的 event 事件。")]),e._v(" "),t("p",[e._v("参数说明：")]),e._v(" "),t("ul",[t("li",[e._v("epfd 即 epoll_create 返回的文件描述符，指向一个 epoll 实例")]),e._v(" "),t("li",[e._v("fd 表示要监听的目标文件描述符")]),e._v(" "),t("li",[e._v("event 表示要监听的事件（可读、可写、发送错误…）")]),e._v(" "),t("li",[e._v("op 表示要对 fd 执行的操作，有以下几种：\n"),t("ul",[t("li",[e._v("EPOLL_CTL_ADD：为 fd 添加一个监听事件 event")]),e._v(" "),t("li",[e._v("EPOLL_CTL_MOD：Change the event event associated with the target file descriptor fd（event 是一个结构体变量，这相当于变量 event 本身没变，但是更改了其内部字段的值）")]),e._v(" "),t("li",[e._v("EPOLL_CTL_DEL：删除 fd 的所有监听事件，这种情况下 event 参数没用")])])])]),e._v(" "),t("p",[e._v("返回值 0 或 -1，表示上述操作成功与否。")]),e._v(" "),t("p",[t("code",[e._v("epoll_ctl")]),e._v(" 会将文件描述符 fd 添加到 "),t("code",[e._v("epoll")]),e._v(" 实例的监听列表里，同时为 fd 设置一个回调函数，并监听事件 event。当 fd 上发生相应事件时，会调用回调函数，将 fd 添加到 "),t("code",[e._v("epoll")]),e._v(" 实例的就绪队列上。")]),e._v(" "),t("h3",{attrs:{id:"epoll-wait"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#epoll-wait"}},[e._v("#")]),e._v(" epoll_wait")]),e._v(" "),t("blockquote",[t("p",[e._v("int epoll_wait(int epfd, struct epoll_event *events, int maxevents, int timeout);\n这是 "),t("code",[e._v("epoll")]),e._v(" 模型的主要函数，功能相当于 "),t("code",[e._v("select")]),e._v("。")])]),e._v(" "),t("p",[e._v("参数说明：")]),e._v(" "),t("ul",[t("li",[e._v("epfd 即 epoll_create 返回的文件描述符，指向一个 epoll 实例")]),e._v(" "),t("li",[e._v("events 是一个数组，保存就绪状态的文件描述符，其空间由调用者负责申请")]),e._v(" "),t("li",[e._v("maxevents 指定 events 的大小")]),e._v(" "),t("li",[e._v("timeout 类似于 select 中的 timeout。如果没有文件描述符就绪，即就绪队列为空，则 epoll_wait 会阻塞 timeout 毫秒。如果 timeout 设为 -1，则 epoll_wait 会一直阻塞，直到有文件描述符就绪；如果 timeout 设为 0，则 epoll_wait 会立即返回")])]),e._v(" "),t("p",[e._v("返回值表示 events 中存储的就绪描述符个数，最大不超过 maxevents。")]),e._v(" "),t("h3",{attrs:{id:"epoll-的优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#epoll-的优点"}},[e._v("#")]),e._v(" epoll 的优点")]),e._v(" "),t("p",[e._v("一开始说，epoll 是对 select 和 poll 的改进，避免了“性能开销大”和“文件描述符数量少”两个缺点。")]),e._v(" "),t("p",[e._v("对于“文件描述符数量少”，select 使用整型数组存储文件描述符集合，而 epoll 使用红黑树存储，数量较大。")]),e._v(" "),t("p",[e._v("对于“性能开销大”，epoll_ctl 中为每个文件描述符指定了回调函数，并在就绪时将其加入到就绪列表，因此 epoll 不需要像 select 那样遍历检测每个文件描述符，只需要判断就绪列表是否为空即可。这样，在没有描述符就绪时，epoll 能更早地让出系统资源。")]),e._v(" "),t("blockquote",[t("blockquote",[t("p",[e._v("相当于时间复杂度从 O(n) 降为 O(1)")])])]),e._v(" "),t("p",[e._v("此外，每次调用 select 时都需要向内核拷贝所有要监听的描述符集合，而 epoll 对于每个描述符，只需要在 epoll_ctl 传递一次，之后 epoll_wait 不需要再次传递。这也大大提高了效率。")]),e._v(" "),t("h2",{attrs:{id:"水平触发、边缘触发"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#水平触发、边缘触发"}},[e._v("#")]),e._v(" 水平触发、边缘触发")]),e._v(" "),t("p",[e._v("select 只支持水平触发，epoll 支持水平触发和边缘触发。")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("水平触发（LT，Level Trigger）：当文件描述符就绪时，会触发通知，如果用户程序没有一次性把数据读/写完，下次还会发出可读/可写信号进行通知。")])]),e._v(" "),t("li",[t("p",[e._v("边缘触发（ET，Edge Trigger）：仅当描述符从未就绪变为就绪时，通知一次，之后不会再通知。")])])]),e._v(" "),t("p",[e._v("区别：边缘触发效率更高，"),t("strong",[e._v("减少了事件被重复触发的次数")]),e._v("，函数不会返回大量用户程序可能不需要的文件描述符。")]),e._v(" "),t("blockquote",[t("p",[e._v("水平触发、边缘触发的名称来源：数字电路当中的电位水平，高低电平切换瞬间的触发动作叫边缘触发，而处于高电平的触发动作叫做水平触发。")])]),e._v(" "),t("h2",{attrs:{id:"为什么边缘触发必须使用非阻塞-i-o"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么边缘触发必须使用非阻塞-i-o"}},[e._v("#")]),e._v(" 为什么边缘触发必须使用非阻塞 I/O？")]),e._v(" "),t("ul",[t("li",[e._v("每次通过 read 系统调用读取数据时，最多只能读取缓冲区大小的字节数；如果某个文件描述符一次性收到的数据超过了缓冲区的大小，那么需要对其 read 多次才能全部读取完毕")]),e._v(" "),t("li",[t("strong",[t("code",[e._v("select")]),e._v(" 可以使用阻塞 I/O")]),e._v("。通过 select 获取到所有可读的文件描述符后，遍历每个文件描述符，read 一次数据（见上文 select 示例）\n"),t("ul",[t("li",[e._v("这些文件描述符都是可读的，因此即使 read 是阻塞 I/O，也一定可以读到数据，不会一直阻塞下去")]),e._v(" "),t("li",[e._v("select 采用水平触发模式，因此如果第一次 read 没有读取完全部数据，那么下次调用 select 时依然会返回这个文件描述符，可以再次 read")]),e._v(" "),t("li",[t("strong",[e._v("select 也可以使用非阻塞 I/O")]),e._v("。当遍历某个可读文件描述符时，使用 for 循环调用 read 多次，直到读取完所有数据为止（返回 EWOULDBLOCK）。这样做会多一次 read 调用，但可以减少调用 select 的次数")])])]),e._v(" "),t("li",[e._v("在 epoll 的边缘触发模式下，只会在文件描述符的可读/可写状态发生切换时，才会收到操作系统的通知\n"),t("ul",[t("li",[e._v("因此，如果使用 epoll 的边缘触发模式，在收到通知时，必须使用非阻塞 I/O，并且必须循环调用 read 或 write 多次，直到返回 EWOULDBLOCK 为止，然后再调用 epoll_wait 等待操作系统的下一次通知")]),e._v(" "),t("li",[e._v("如果没有一次性读/写完所有数据，那么在操作系统看来这个文件描述符的状态没有发生改变，将不会再发起通知，调用 epoll_wait 会使得该文件描述符一直等待下去，服务端也会一直等待客户端的响应，业务流程无法走完")]),e._v(" "),t("li",[e._v("这样做的好处是每次调用 epoll_wait 都是有效的——保证数据全部读写完毕了，等待下次通知。在水平触发模式下，如果调用 epoll_wait 时数据没有读/写完毕，会直接返回，再次通知。因此边缘触发能显著减少事件被触发的次数")]),e._v(" "),t("li",[e._v("为什么 epoll 的"),t("strong",[e._v("边缘触发模式不能使用阻塞 I/O")]),e._v("？很显然，边缘触发模式需要循环读/写一个文件描述符的所有数据。如果使用阻塞 I/O，那么一定会在最后一次调用（没有数据可读/写）时阻塞，导致无法正常结束")])])])]),e._v(" "),t("h2",{attrs:{id:"三者对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三者对比"}},[e._v("#")]),e._v(" 三者对比")]),e._v(" "),t("ul",[t("li",[e._v("select：调用开销大（需要复制集合）；集合大小有限制；需要遍历整个集合找到就绪的描述符")]),e._v(" "),t("li",[e._v("poll：poll 采用链表的方式存储文件描述符，没有最大存储数量的限制，其他方面和 select 没有区别")]),e._v(" "),t("li",[e._v("epoll：调用开销小（不需要复制）；集合大小无限制；采用回调机制，不需要遍历整个集合\nselect、poll 都是在用户态维护文件描述符集合，因此每次需要将完整集合传给内核；epoll 由操作系统在内核中维护文件描述符集合，因此只需要在创建的时候传入文件描述符。")])]),e._v(" "),t("p",[e._v("此外 "),t("code",[e._v("select")]),e._v(" 只支持水平触发，"),t("code",[e._v("epoll")]),e._v(" 支持边缘触发。")]),e._v(" "),t("h2",{attrs:{id:"适用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#适用场景"}},[e._v("#")]),e._v(" 适用场景")]),e._v(" "),t("p",[e._v("当连接数较多并且有很多的不活跃连接时，"),t("code",[e._v("epoll")]),e._v(" 的效率比其它两者高很多。当连接数较少并且都十分活跃的情况下，由于 epoll 需要很多回调，因此性能可能低于其它两者。")]),e._v(" "),t("h2",{attrs:{id:"redis-的线程模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis-的线程模型"}},[e._v("#")]),e._v(" Redis 的线程模型")]),e._v(" "),t("p",[t("code",[e._v("Redis")]),e._v(" 是一个单线程的工作模型，使用 "),t("code",[e._v("I/O")]),e._v(" 多路复用来处理客户端的多个连接。为什么 Redis 选择单线程也能效率这么高？")]),e._v(" "),t("p",[t("code",[e._v("I/O")]),e._v(" 设备（如磁盘、网络）等速度远远慢于 CPU，因此引入了多线程技术。当一个线程发起 "),t("code",[e._v("I/O")]),e._v(" 请求时，先将它挂起，切换到别的线程；当 "),t("code",[e._v("I/O")]),e._v(" 设备就绪时，再切换回该线程。总之，"),t("strong",[e._v("多线程技术是为了充分利用 CPU 的计算资源，适用于下层存储慢速的场景")]),e._v("。")]),e._v(" "),t("p",[e._v("而 redis 是纯内存操作，读写速度非常快。所有的操作都会在内存中完成，不涉及任何 I/O 操作，"),t("strong",[e._v("因此多线程频繁的上下文切换反而是一种负优化")]),e._v("。Redis 选择基于"),t("strong",[e._v("非阻塞 I/O 的 I/O 多路复用机制")]),e._v("，在单线程里并发处理客户端的多个连接，减少多线程带来的系统开销，同时也有更好的可维护性，方便开发和调试。")]),e._v(" "),t("p",[e._v("不过 redis 在最新的几个版本中也引入了多线程，目的是：")]),e._v(" "),t("p",[e._v("异步处理删除操作。当删除超大键值对的时候，单线程内同步地删除可能会阻塞待处理的任务\n应对网络 "),t("code",[e._v("I/O")]),e._v(" 的场景，网络 "),t("code",[e._v("I/O")]),e._v(" 是慢速 "),t("code",[e._v("I/O")]),e._v("。redis6 吞吐量提高了 1 倍")])])}),[],!1,null,null,null);_.default=l.exports}}]);