(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{535:function(t,e,a){"use strict";a.r(e);var v=a(6),i=Object(v.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[a("a",{attrs:{href:"https://adjava.netlify.app/#/",target:"_blank",rel:"noopener noreferrer"}},[t._v("互联网 Java 工程师进阶知识完全扫盲"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://juejin.cn/post/6844903652201594887#heading-0",target:"_blank",rel:"noopener noreferrer"}},[t._v("一个面试题引起的SpringBoot启动解析"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://design-patterns.readthedocs.io/zh_CN/latest/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("图说设计模式"),a("OutboundLink")],1),t._v(" "),a("a",{attrs:{href:"https://blog.csdn.net/ThinkWon/article/details/104588612",target:"_blank",rel:"noopener noreferrer"}},[t._v("消息队列面试题"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"小知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小知识"}},[t._v("#")]),t._v(" 小知识")]),t._v(" "),a("ul",[a("li",[t._v("Maven 是一个项目管理工具，可以对 Java 项目进行构建、依赖管理。")])]),t._v(" "),a("h3",{attrs:{id:"jdk-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk-命令"}},[t._v("#")]),t._v(" jdk 命令")]),t._v(" "),a("ul",[a("li",[t._v("jstat: 查看 JVM 统计信息， 显示进程中的类装载、内存、垃圾回收等信息")]),t._v(" "),a("li",[t._v("jinfo: 查看虚拟机配置参数信息， 也可用于调整虚拟机的配置参数。")]),t._v(" "),a("li",[t._v("jmap: 导出内存映像文件&内存使用情况， 获取堆 dump 文件， 堆各区使用情况， 堆中对象的统计信息， 类加载信息等。")]),t._v(" "),a("li",[t._v("jhat: 堆分析工具， 和 jmap 搭配使用， 启动一个HTTP服务， 网页查看信息。")]),t._v(" "),a("li",[t._v("jstack： 线程快照， 可以查看到死锁、死循环等")]),t._v(" "),a("li",[t._v("jcmd: 多功能命令行")])]),t._v(" "),a("h3",{attrs:{id:"有哪些方面的因素会导致网站访问慢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有哪些方面的因素会导致网站访问慢"}},[t._v("#")]),t._v(" 有哪些方面的因素会导致网站访问慢？")]),t._v(" "),a("ol",[a("li",[t._v("服务器出口带宽不够用\n"),a("ul",[a("li",[t._v("本身服务器购买的出口带宽比较小。一旦并发量大的话，就会造成分给每个用户的出口带宽就小，访问速度自然就会慢。")]),t._v(" "),a("li",[t._v("跨运营商网络导致带宽缩减。例如，公司网站放在电信的网络上，那么客户这边对接是长城宽带或联通，这也可能导致带宽的缩减。")])])]),t._v(" "),a("li",[t._v("服务器负载过大，导致响应不过来\n"),a("ul",[a("li",[t._v("分析系统负载，使用 w 命令或者 uptime 命令查看系统负载。如果负载很高，则使用 top 命令查看 CPU ，MEM 等占用情况，要么是 CPU 繁忙，要么是内存不够。")]),t._v(" "),a("li",[t._v("如果这二者都正常，再去使用 sar 命令分析网卡流量，分析是不是遭到了攻击。一旦分析出问题的原因，采取对应的措施解决，如决定要不要杀死一些进程，或者禁止一些访问等。")])])]),t._v(" "),a("li",[t._v("数据库瓶颈\n"),a("ul",[a("li",[t._v("如果慢查询比较多。那么就要开发人员或 DBA 协助进行 SQL 语句的优化。")]),t._v(" "),a("li",[t._v("如果数据库响应慢，考虑可以加一个数据库缓存，如 Redis 等。然后，也可以搭建 MySQL 主从，一台 MySQL 服务器负责写，其他几台从数据库负责读。")])])]),t._v(" "),a("li",[t._v("网站开发代码没有优化好\n例如 SQL 语句没有优化，导致数据库读写相当耗时。")])]),t._v(" "),a("h3",{attrs:{id:"cap、-base-理论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cap、-base-理论"}},[t._v("#")]),t._v(" cap、 base 理论")]),t._v(" "),a("p",[t._v("分布式系统的CAP理论：理论首先把分布式系统中的三个特性进行了如下归纳：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("一致性（C）")]),t._v("：在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访问同一份最新的数据副本）")]),t._v(" "),a("li",[a("strong",[t._v("可用性（A）")]),t._v("：在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据更新具备高可用性）")]),t._v(" "),a("li",[a("strong",[t._v("分区容忍性（P）")]),t._v("：以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择。")])]),t._v(" "),a("p",[t._v("BASE理论： BASE是Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）三个短语的简写，BASE是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的结论，是基于CAP定理逐步演化而来的，其核心思想是即使无法做到强一致性（Strong consistency），但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性（Eventual consistency）。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("基本可用")]),t._v("： 基本可用是指分布式系统在出现不可预知故障的时候，允许损失部分可用性——但请注意，这绝不等价于系统不可用，以下两个就是“基本可用”的典型例子")]),t._v(" "),a("li",[a("strong",[t._v("软状态")]),t._v("： 弱状态也称为软状态，和硬状态相对，是指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据听不的过程存在延时。")]),t._v(" "),a("li",[a("strong",[t._v("最终一致性")]),t._v("： 最终一致性强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性")])]),t._v(" "),a("h3",{attrs:{id:"秒杀场景设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#秒杀场景设计"}},[t._v("#")]),t._v(" 秒杀场景设计")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("高并发&高性能")]),t._v(" "),a("ul",[a("li",[t._v("热点数据处理\n"),a("ul",[a("li",[t._v("静态热点数据 ：可以提前预测到的热点数据比如要秒杀的商品。")]),t._v(" "),a("li",[t._v("动态热点数据 ： 不能够提前预测到的热点数据，需要通过一些手段动态检测系统运行情况产生。")]),t._v(" "),a("li",[t._v("使用缓存， 那么会造成 "),a("code",[t._v("缓存雪崩，缓存击穿，缓存穿透")]),t._v(" 问题")])])]),t._v(" "),a("li",[t._v("流量削峰\n"),a("ul",[a("li",[t._v("消息队列： 请求放到消息队列中去， 后端慢慢处理")]),t._v(" "),a("li",[t._v("回答问题/验证码： 一方面可以避免用户请求过于集中，另一方面可以有效解决用户使用脚本作弊。")])])])])]),t._v(" "),a("li",[a("p",[t._v("高可用")]),t._v(" "),a("ul",[a("li",[t._v("集群化： 比如说 Nginx 集群、Kafka 集群、Redis 集群。")]),t._v(" "),a("li",[t._v("限流： Hystrix 是 Netflix 开源的熔断降级组件。")]),t._v(" "),a("li",[t._v("排队： 你可以把排队看作是限流的一个变种。限流是直接拒绝了用户的请求，而排队则是让用户等待一定的时间（类比现实世界的排队）。")]),t._v(" "),a("li",[t._v("降级： 降级的核心思想就是丢车保帅，优先保证核心业务。")])])]),t._v(" "),a("li",[a("p",[t._v("超卖")])]),t._v(" "),a("li",[a("p",[t._v("链接暴露： URL动态化， 通过MD5之类的加密算法加密随机的字符串去做url，然后通过前端代码获取url后台校验才能通过。")])]),t._v(" "),a("li",[a("p",[t._v("资源静态化： 那就把能提前放入cdn服务器的东西都放进去，反正把所有能提升效率的步骤都做一下，减少真正秒杀时候服务器的压力。")])]),t._v(" "),a("li",[a("p",[t._v("按钮控制： 秒杀前，一般按钮都是置灰的，只有时间到了，才能点击。")])]),t._v(" "),a("li",[a("p",[t._v("限流： 限流这里我觉得应该分为前端限流和后端限流。")]),t._v(" "),a("ul",[a("li",[t._v("前端限流：这个很简单，一般秒杀不会让你一直点的，一般都是点击一下或者两下然后几秒之后才可以继续点击，这也是保护服务器的一种手段。")]),t._v(" "),a("li",[t._v("后端限流：秒杀的时候肯定是涉及到后续的订单生成和支付等操作，但是都只是成功的幸运儿才会走到那一步，那一旦100个产品卖光了，return了一个false，前端直接秒杀结束，然后你后端也关闭后续无效请求的介入了。")])])]),t._v(" "),a("li",[a("p",[t._v("限流&降级&熔断&隔离： 这个为啥要做呢，不怕一万就怕万一，万一你真的顶不住了，限流，顶不住就挡一部分出去但是不能说不行，降级，降级了还是被打挂了，熔断，至少不要影响别的系统，隔离，你本身就独立的，但是你会调用其他的系统嘛，你快不行了你别拖累兄弟们啊。")])])]),t._v(" "),a("h3",{attrs:{id:"springmvc-工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springmvc-工作原理"}},[t._v("#")]),t._v(" SpringMVC 工作原理")]),t._v(" "),a("ol",[a("li",[t._v("客户端（浏览器）发送请求，直接请求到 "),a("code",[t._v("DispatcherServlet")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("DispatcherServlet")]),t._v(" 根据请求信息调用 "),a("code",[t._v("HandlerMapping")]),t._v("，解析请求对应的 "),a("code",[t._v("Handler")]),t._v("。")]),t._v(" "),a("li",[t._v("解析到对应的 "),a("code",[t._v("Handler")]),t._v("（也就是我们平常说的 "),a("code",[t._v("Controller")]),t._v(" 控制器）后，开始由 "),a("code",[t._v("HandlerAdapter")]),t._v(" 适配器处理。")]),t._v(" "),a("li",[a("code",[t._v("HandlerAdapter")]),t._v(" 会根据 "),a("code",[t._v("Handler")]),t._v("来调用真正的处理器来处理请求，并处理相应的业务逻辑。")]),t._v(" "),a("li",[t._v("处理器处理完业务后，会返回一个 "),a("code",[t._v("ModelAndView")]),t._v(" 对象，"),a("code",[t._v("Model")]),t._v(" 是返回的数据对象，"),a("code",[t._v("View")]),t._v(" 是个逻辑上的 "),a("code",[t._v("View")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("ViewResolver")]),t._v(" 会根据逻辑 "),a("code",[t._v("View")]),t._v(" 查找实际的 "),a("code",[t._v("View")]),t._v("。")]),t._v(" "),a("li",[a("code",[t._v("DispaterServlet")]),t._v(" 把返回的 "),a("code",[t._v("Model")]),t._v(" 传给 "),a("code",[t._v("View")]),t._v("（视图渲染）。")]),t._v(" "),a("li",[t._v("把 "),a("code",[t._v("View")]),t._v(" 返回给请求者（浏览器）")])]),t._v(" "),a("h3",{attrs:{id:"设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[t._v("#")]),t._v(" 设计模式")]),t._v(" "),a("ul",[a("li",[t._v("创建性模式")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("设计模式名称")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("简要说明")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("速记关键字")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("工厂方法模式(Factory Method)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("定义了创建对象的接口，它允许子类决定实例化哪个类")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("动态生产对象")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("抽象工厂模式(Abstract Factory)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("提供一个接口，可以创建一系列相关或相互依赖的对象，而无需指定它们具体的类")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("生产成系列对象")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("构建器模式(Builder)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将一个复杂类的表示与其构造相分离，使得相同的构建过程能够得出不同的表示")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("复杂对象构造")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("原型模式(Prototype)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("允许对象在不了解要创建对象的确切类以及如何创建等细节的情况下创建自定义对象。通过拷贝原型对象来创建新的对象")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("克隆对象")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("单例模式(Singleton)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("确保一个类只有一个实例，并且提供了对该类的全局访问入口")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("单实例")])])])]),t._v(" "),a("ul",[a("li",[t._v("结构性模式")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("设计模式名称")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("简要说明")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("速记关键字")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("适配器模式(Adapter)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将一个类的接口转换成用户希望得到的另一种接口。它使原本不相容的接口得以协同工作")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("转换接口")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("桥接模式(Bridge)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("将一个复杂的组件分成两个独立的但又相关的继承层次结构， 将类的抽象部分和它的实现部分分离开来，使它们可以独立地变化")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("继承树拆分")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("组合模式(Composite)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("创建树型层次结构来改变复杂性，同时允许结构中的每一个元素操作同一个接口。用于表示“整体-部分”的层次结构")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("树形目录结构")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("装饰模式(Decorator)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("在不修改对象外观和功能的情况下添加或者删除对象功能， 即动态地给一个对象添加一些额外的职责")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("动态附加职责")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("外观模式(Facade)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("子系统中的一组接口提供了一个统一的接口")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("对外统一接口")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("享元模式(Flyweight)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("可以通过共享对象减少系统中低等级的、详细的对象数目， 提供支持大量细粒度对象共享的有效方法")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("汉字编码")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("代理模式(Proxy)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("为控制对初始对象的访问提供了一个代理或者占位符对象")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("快捷方式")])])])]),t._v(" "),a("ul",[a("li",[t._v("行为性模式")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("设计模式名称")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("简要说明")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("速记关键字")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("职责链模式(Chain of Responsibility)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("可以在系统中建立一个链，这样消息可以在首先接收到它的级别处被处理，或者可以定位到可以处理它的对象")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("传递职责")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("命令模式(Command)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("在对象中封装了请求，这样就可以保存命令，将该命令传递给方法以及像任何其他对象一样返回该命令")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("日志记录，可撤销")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("解释器模式(Interpreter)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("可以解释定义其语法表示的语言，还提供了用表示来解释语言中的语句的解释器")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("虚拟机的机制")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("迭代器模式(Iterator)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("为集合中的有序访问提供了一致的方法，而该集合是独立于基础集合，并与之相分离的")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("数据集")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("中介者模式(Mediator)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("通过引入一个能够管理对象间消息分布的对象，简化了系统中对象间的通信")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("不直接引用")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("备忘录模式(Memento)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("保持对象状态的“快照”(snapshot)， 这样对象可以在不向外界公开其内容的情况下返回到它的最初状态")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("游戏存档")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("观察者模式(Observer)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("为组件向相关接收方广播消息提供了灵活的方法， 定义对象间的一种一对多的依赖关系")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("订阅、广播、联动")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("状态模式(State)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("允许一个对象在其内部状态改变时改变它的行为")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("状态变成类")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("策略模式(Strategy)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("定义一系列算法，把它们一个个封装起来，并且使它们之间可互相替换，从而让算法可以独立于使用它的用户而变化")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("多方案切换")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("模板方法模式(Template Method)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("提供了在不重写方法的前提下允许子类重载部分方法的方法")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("框架")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("访问者模式(Visitor)")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("提供了一种方便的、可维护的方法来表示在对象结构元素上要进行的操作")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("数据与操作分离")])])])]),t._v(" "),a("h3",{attrs:{id:"spring-设计模式有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-设计模式有哪些"}},[t._v("#")]),t._v(" spring 设计模式有哪些")]),t._v(" "),a("ol",[a("li",[t._v("简单工厂(非23种设计模式中的一种)：\n"),a("ul",[a("li",[t._v("实现方式： BeanFactory。Spring中的BeanFactory就是简单工厂模式的体现，根据传入一个唯一的标识来获得Bean对象，但是否是在传入参数后创建还是传入参数前创建这个要根据具体情况来定。")]),t._v(" "),a("li",[t._v("实质： 由一个工厂类根据传入的参数，动态决定应该创建哪一个产品类。")])])]),t._v(" "),a("li",[t._v("工厂方法\n"),a("ul",[a("li",[t._v("实现方式： FactoryBean接口。")]),t._v(" "),a("li",[t._v("实现原理： 实现了FactoryBean接口的bean是一类叫做factory的bean。其特点是，spring会在使用getBean()调用获得该bean时，会自动调用该bean的getObject()方法，所以返回的不是factory这个bean，而是这个bean.getOjbect()方法的返回值。")])])]),t._v(" "),a("li",[t._v("单例模式： 默认 bean")]),t._v(" "),a("li",[t._v("适配器模式\n"),a("ul",[a("li",[t._v("实现方式： SpringMVC中的适配器HandlerAdatper。")]),t._v(" "),a("li",[t._v("实现原理： HandlerAdatper根据Handler规则执行不同的Handler。")]),t._v(" "),a("li",[t._v("实现意义：HandlerAdatper使得Handler的扩展变得容易，只需要增加一个新的Handler和一个对应的HandlerAdapter即可。 因此Spring定义了一个适配接口，使得每一种Controller有一种对应的适配器实现类，让适配器代替controller执行相应的方法。这样在扩展Controller时，只需要增加一个适配器类就完成了SpringMVC的扩展了。")])])]),t._v(" "),a("li",[t._v("装饰器模式\n"),a("ul",[a("li",[t._v("实现方式： Spring中用到的包装器模式在类名上有两种表现：一种是类名中含有Wrapper，另一种是类名中含有Decorator。")]),t._v(" "),a("li",[t._v("实质： 动态地给一个对象添加一些额外的职责。")])])]),t._v(" "),a("li",[t._v("代理模式： AOP底层，就是动态代理模式的实现。")]),t._v(" "),a("li",[t._v("观察者模式 又叫做发布-订阅\n"),a("ul",[a("li",[t._v("实现方式： spring的事件驱动模型使用的是 观察者模式 ，Spring中Observer模式常用的地方是listener的实现。")]),t._v(" "),a("li",[t._v("具体实现： 事件机制的实现需要三个部分,事件源,事件,事件监听器")])])])]),t._v(" "),a("h3",{attrs:{id:"接口保证幂等性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口保证幂等性"}},[t._v("#")]),t._v(" 接口保证幂等性")]),t._v(" "),a("ol",[a("li",[t._v("对于每个请求必须有一个唯一的标识，举个栗子：订单支付请求，肯定得包含订单 id，一个订单 id 最多支付一次，对吧。")]),t._v(" "),a("li",[t._v("每次处理完请求之后，必须有一个记录标识这个请求处理过了。常见的方案是在 mysql 中记录个状态啥的，比如支付之前记录一条这个订单的支付流水。")]),t._v(" "),a("li",[t._v("每次接收请求需要进行判断，判断之前是否处理过。比如说，如果有一个订单已经支付了，就已经有了一条支付流水，那么如果重复发送这个请求，则此时先插入支付流水，orderId 已经存在了，唯一键约束生效，报错插入不进去的。然后你就不用再扣款了。")])]),t._v(" "),a("h3",{attrs:{id:"分布式服务接口请求的顺序性如何保证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式服务接口请求的顺序性如何保证"}},[t._v("#")]),t._v(" 分布式服务接口请求的顺序性如何保证？")]),t._v(" "),a("p",[t._v("将任务放进队列里， 按照顺序处理， 具体就是一个队列对应一个消费者")]),t._v(" "),a("h3",{attrs:{id:"kafka、activemq、rabbitmq、rocketmq-有什么优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kafka、activemq、rabbitmq、rocketmq-有什么优缺点"}},[t._v("#")]),t._v(" Kafka、ActiveMQ、RabbitMQ、RocketMQ 有什么优缺点？")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("特性")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("ActiveMQ")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("RabbitMQ")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("RocketMQ")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Kafka")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("单机吞吐量")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("万级，比 RocketMQ、Kafka 低一个数量级")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("同 ActiveMQ")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("10 万级，支撑高吞吐\t10 万级，高吞吐，一般配合大")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("数据类的系统来进行实时数据计算、日志采集等场景")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("topic 数量对吞吐量的影响")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("topic 可以达到几百/几千的级别，吞吐量会有较小幅度的下降，这是 RocketMQ 的一大优势，在同等机器下，可以支撑大量的 topic")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("topic 从几十到几百个时候，吞吐量会大幅度下降，在同等机器下，Kafka 尽量保证 topic 数量不要过多，如果要支撑大规模的 topic，需要增加更多的机器资源")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("时效性")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("ms 级")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("微秒级，这是 RabbitMQ 的一大特点，延迟最低")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("ms 级")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("延迟在 ms 级以内")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("可用性")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("高，基于主从架构实现高可用")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("同 ActiveMQ")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("非常高，分布式架构")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("非常高，分布式，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("消息可靠性")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("有较低的概率丢失数据")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("基本不丢")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("经过参数优化配置，可以做到 0 丢失")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("同 RocketMQ")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("功能支持")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("MQ 领域的功能极其完备")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("基于 erlang 开发，并发能力很强，性能极好，延时很低")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("MQ 功能较为完善，还是分布式的，扩展性好")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用")])])])]),t._v(" "),a("h3",{attrs:{id:"消息的顺序问题-发送有序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息的顺序问题-发送有序"}},[t._v("#")]),t._v(" 消息的顺序问题(发送有序)")]),t._v(" "),a("p",[t._v("消息有序指的是可以按照消息的发送顺序来消费。")]),t._v(" "),a("p",[t._v("解决：  保证生产者 - MQServer - 消费者是一对一对一的关系")]),t._v(" "),a("h3",{attrs:{id:"消息的重复问题-去重表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#消息的重复问题-去重表"}},[t._v("#")]),t._v(" 消息的重复问题(去重表)")]),t._v(" "),a("p",[t._v("造成消息重复的根本原因是：网络不可达。")]),t._v(" "),a("p",[t._v("消费端处理消息的业务逻辑保持幂等性。只要保持幂等性，不管来多少条重复消息，最后处理的结果都一样。保证每条消息都有唯一编号且保证消息处理成功与去重表的日志同时出现。利用一张日志表来记录已经处理成功的消息的 ID，如果新到的消息 ID 已经在日志表中，那么就不再处理这条消息。")]),t._v(" "),a("h3",{attrs:{id:"如何保证消息不被重复消费-或者说-如何保证消息消费的幂等性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何保证消息不被重复消费-或者说-如何保证消息消费的幂等性"}},[t._v("#")]),t._v(" 如何保证消息不被重复消费？或者说，如何保证消息消费的幂等性？")]),t._v(" "),a("ul",[a("li",[t._v("比如你拿个数据要写库，你先根据主键查一下，如果这数据都有了，你就别插入了，update 一下好吧。")]),t._v(" "),a("li",[t._v("比如你是写 Redis，那没问题了，反正每次都是 set，天然幂等性。")]),t._v(" "),a("li",[t._v("比如你不是上面两个场景，那做的稍微复杂一点，你需要让生产者发送每条数据的时候，里面加一个全局唯一的 id，类似订单 id 之类的东西，然后你这里消费到了之后，先根据这个 id 去比如 Redis 里查一下，之前消费过吗？如果没有消费过，你就处理，然后这个 id 写 Redis。如果消费过了，那你就别处理了，保证别重复处理相同的消息即可。")]),t._v(" "),a("li",[t._v("比如基于数据库的唯一键来保证重复数据不会重复插入多条。因为有唯一键约束了，重复数据插入只会报错，不会导致数据库中出现脏数据。")])]),t._v(" "),a("h3",{attrs:{id:"如何保证消息的可靠性传输-或者说-如何处理消息丢失的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何保证消息的可靠性传输-或者说-如何处理消息丢失的问题"}},[t._v("#")]),t._v(" 如何保证消息的可靠性传输？或者说，如何处理消息丢失的问题？")]),t._v(" "),a("ol",[a("li",[t._v("生产者弄丢了数据:\n"),a("ul",[a("li",[t._v("RabbitMQ 提供的事务功能： 就是生产者发送数据之前开启 RabbitMQ 事务 channel.txSelect ，然后发送消息，如果消息没有成功被 RabbitMQ 接收到，那么生产者会收到异常报错，此时就可以回滚事务 channel.txRollback ，然后重试发送消息；如果收到了消息，那么可以提交事务 channel.txCommit 。")]),t._v(" "),a("li",[t._v("confirm 机制： 你每次写的消息都会分配一个唯一的 id，然后如果写入了 RabbitMQ 中，RabbitMQ 会给你回传一个 ack 消息，告诉你说这个消息 ok 了。如果 RabbitMQ 没能处理这个消息，会回调你的一个 nack 接口，告诉你这个消息接收失败，你可以重试。而且你可以结合这个机制自己在内存里维护每个消息 id 的状态，如果超过一定时间还没接收到这个消息的回调，那么你可以重发。")])])]),t._v(" "),a("li",[t._v("RabbitMQ 弄丢了数据\n"),a("ul",[a("li",[t._v("开启 RabbitMQ 的持久化")])])]),t._v(" "),a("li",[t._v("消费端弄丢了数据\n"),a("ul",[a("li",[t._v("就是你必须关闭 RabbitMQ 的自动 ack ，可以通过一个 api 来调用就行，然后每次你自己代码里确保处理完的时候，再在程序里 ack 一把。这样的话，如果你还没处理完，不就没有 ack 了？那 RabbitMQ 就认为你还没处理完，这个时候 RabbitMQ 会把这个消费分配给别的 consumer 去处理，消息是不会丢的。")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"/img/rabbit%E6%B6%88%E6%81%AF%E4%B8%A2%E5%A4%B1.jpg",alt:"rabbit消息丢失"}})]),t._v(" "),a("h3",{attrs:{id:"mybatis-和-的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-和-的区别是什么"}},[t._v("#")]),t._v(" Mybatis #{}和${}的区别是什么？")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("#{}是预编译处理，${}是字符串替换。\nMybatis 在处理#{}时，会将 sql 中的#{}替换为?号，调用 PreparedStatement 的\nset 方法来赋值；\nMybatis 在处理${}时，就是把${}替换成变量的值。\n使用#{}可以有效的防止 SQL 注入，提高系统安全性。\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h3",{attrs:{id:"spring-boot、spring-mvc-和-spring-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot、spring-mvc-和-spring-有什么区别"}},[t._v("#")]),t._v(" Spring Boot、Spring MVC 和 Spring 有什么区别？")]),t._v(" "),a("ul",[a("li",[t._v("Spring 是一个“引擎”;")]),t._v(" "),a("li",[t._v("Spring MVC 是基于Spring的一个 MVC 框架;\n"),a("ul",[a("li",[t._v("它是Spring的一个模块，是一个web框架。通过Dispatcher Servlet, ModelAndView 和 View Resolver，开发web应用变得很容易。")])])]),t._v(" "),a("li",[t._v("Spring Boot 是基于Spring4的条件注册的一套快速开发整合包。\n"),a("ul",[a("li",[t._v("实现了自动配置，降低了项目搭建的复杂度。它主要是为了解决使用Spring框架需要进行大量的配置太麻烦的问题")])])])]),t._v(" "),a("h3",{attrs:{id:"springbootapplication-注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springbootapplication-注解"}},[t._v("#")]),t._v(" @SpringBootApplication 注解")]),t._v(" "),a("ul",[a("li",[t._v("@EnableAutoConfiguration：启用 SpringBoot 的自动配置机制")]),t._v(" "),a("li",[t._v("@ComponentScan： 扫描被@Component (@Service,@Controller)注解的 bean，注解默认会扫描该类所在的包下所有的类。")]),t._v(" "),a("li",[t._v("@Configuration：允许在上下文中注册额外的 bean 或导入其他配置类")])]),t._v(" "),a("h3",{attrs:{id:"常用的注解有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用的注解有哪些"}},[t._v("#")]),t._v(" 常用的注解有哪些？")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Spring Bean 相关：\n\n@Autowired : 自动导入对象到类中，被注入进的类同样要被 Spring 容器管理。\n@RestController : @RestController注解是@Controller和@ResponseBody的合集,表示这是个控制器 bean,并且是将函数的返回值直 接填入 HTTP 响应体中,是 REST 风格的控制器。\n@Component ：通用的注解，可标注任意类为 Spring 组件。如果一个 Bean 不知道属于哪个层，可以使用@Component 注解标注。\n@Repository : 对应持久层即 Dao 层，主要用于数据库相关操作。\n@Service : 对应服务层，主要涉及一些复杂的逻辑，需要用到 Dao 层。\n@Controller : 对应 Spring MVC 控制层，主要用于接受用户请求并调用 Service 层返回数据给前端页面。\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("h3",{attrs:{id:"spring-bean生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-bean生命周期"}},[t._v("#")]),t._v(" Spring Bean生命周期")]),t._v(" "),a("p",[t._v("BeanFactory和ApplicationContext是Spring两种很重要的容器,前者提供了最基本的依赖注入的支持，而后者在继承前者的基础进行了功能的拓展，例如增加了事件传播，资源访问和国际化的消息访问等功能。")]),t._v(" "),a("h3",{attrs:{id:"什么是-cap-定理-cap-theorem"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-cap-定理-cap-theorem"}},[t._v("#")]),t._v(" 什么是 CAP 定理（CAP theorem）")]),t._v(" "),a("p",[t._v("在理论计算机科学中，CAP 定理（CAP theorem），又被称作布鲁尔定理（Brewer's theorem），它指出对于一个分布式计算系统来说，不可能同时满足以下三点：")]),t._v(" "),a("ul",[a("li",[t._v("一致性（Consistency） （等同于所有节点访问同一份最新的数据副本）")]),t._v(" "),a("li",[t._v("可用性（Availability）（每次请求都能获取到非错的响应——但是不保证获取的数据为最新数据）")]),t._v(" "),a("li",[t._v("分区容错性（Partition tolerance）（以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在 C 和 A 之间做出选择。）")])])])}),[],!1,null,null,null);e.default=i.exports}}]);