(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{553:function(t,s,n){"use strict";n.r(s);var r=n(6),v=Object(r.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"何为线程安全"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#何为线程安全"}},[t._v("#")]),t._v(" 何为线程安全")]),t._v(" "),n("p",[t._v("如果只有一个线程才可以操作此数据，则必是线程安全的。\n如果有多个线程操作此数据，则此数据是共享数据。如果不考虑同步机制的话，会存在线程安全问题。")]),t._v(" "),n("p",[t._v("问题： 方法中定义的局部变量是否线程安全?\n具体情况具体分析")]),t._v(" "),n("h2",{attrs:{id:"并发三问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#并发三问题"}},[t._v("#")]),t._v(" 并发三问题")]),t._v(" "),n("ol",[n("li",[t._v("有序性(重排序)")])]),t._v(" "),n("p",[t._v("重排序由以下几种机制引起：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("编译器优化：对于没有数据依赖关系的操作，编译器在编译的过程中会进行一定程度的重排。")])]),t._v(" "),n("li",[n("p",[t._v("指令重排序：CPU 优化行为，也是会对不存在数据依赖关系的指令进行一定程度的重排。")])])]),t._v(" "),n("blockquote",[n("p",[t._v("这个和编译器优化差不多，就算编译器不发生重排，CPU 也可以对指令进行重排，这个就不用多说了。")])]),t._v(" "),n("ul",[n("li",[t._v("内存系统重排序：内存系统没有重排序，但是由于有缓存的存在，使得程序整体上会表现出乱序的行为。")])]),t._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[t._v("可见性")])]),t._v(" "),n("p",[t._v("线程间的对于共享变量的可见性问题不是直接由多核引起的，而是由多缓存引起的。如果每个核心共享同一个缓存，那么也就不存在内存可见性问题了。")]),t._v(" "),n("p",[t._v("现代多核 CPU 中每个核心拥有自己的一级缓存或一级缓存加上二级缓存等，问题就发生在每个核心的独占缓存上。每个核心都会将自己需要的数据读到独占缓存中，数据修改后也是写入到缓存中，然后等待刷入到主存中。所以会导致有些核心读取的值是一个过期的值。")]),t._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[t._v("原子性")])]),t._v(" "),n("h2",{attrs:{id:"synchronized-关键字"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#synchronized-关键字"}},[t._v("#")]),t._v(" synchronized 关键字")]),t._v(" "),n("p",[t._v("一个线程在获取到监视器锁以后才能进入 synchronized 控制的代码块，一旦进入代码块，首先，该线程对于共享变量的缓存就会失效，因此 synchronized 代码块中对于共享变量的读取需要从主内存中重新获取，也就能获取到最新的值。")]),t._v(" "),n("p",[t._v("退出代码块的时候的，会将该线程写缓冲区中的数据刷到主内存中，所以在 synchronized 代码块之前或 synchronized 代码块中对于共享变量的操作随着该线程退出 synchronized 块，会立即对其他线程可见（这句话的前提是其他读取共享变量的线程会从主内存读取最新值）。")]),t._v(" "),n("blockquote",[n("p",[t._v("因此，我们可以总结一下：线程 a 对于进入 synchronized 块之前或在 synchronized 中对于共享变量的操作，对于后续的持有同一个监视器锁的线程 b 可见。")])])])}),[],!1,null,null,null);s.default=v.exports}}]);