(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{554:function(t,a,s){"use strict";s.r(a);var n=s(6),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("使用 "),s("code",[t._v("vuepress")]),t._v(" 搭建静态网站并部署至云服务器\n")]),t._v(" "),s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://snailclimb.gitee.io/springboot-guide/#/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Spring Boot 指南"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"新建-spring-boot-项目常用的两种方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#新建-spring-boot-项目常用的两种方式"}},[t._v("#")]),t._v(" 新建 Spring Boot 项目常用的两种方式")]),t._v(" "),s("p",[t._v("你可以通过 "),s("a",{attrs:{href:"https://start.spring.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://start.spring.io/"),s("OutboundLink")],1),t._v(" 这个网站来生成一个 Spring Boot 的项目。")]),t._v(" "),s("h2",{attrs:{id:"spring-boot-项目结构分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-boot-项目结构分析"}},[t._v("#")]),t._v(" Spring Boot 项目结构分析")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/springboot-hellowold-structure.png",alt:"项目目录"}})]),t._v(" "),s("blockquote",[s("p",[t._v("调用关系: controller=>service(接口)=>impl(实现)")])]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("com\n  +- example\n    +- myproject\n      +- Application.java\n      |\n      +- domain\n      |  +- Customer.java\n      |  +- CustomerRepository.java\n      |\n      +- service\n      |  +- CustomerService.java\n      |\n      +- controller\n      |  +- CustomerController.java\n      |  \n      +- config\n      |  +- swagerConfig.java\n      |\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br")])]),s("ul",[s("li",[t._v("Application.java是项目的启动类 以 Application为后缀名的 Java 类一般就是 Spring Boot 的启动类")]),t._v(" "),s("li",[t._v("domain目录主要用于实体(Entity)与数据访问层(Repository)")]),t._v(" "),s("li",[t._v("service 层主要是业务类代码")]),t._v(" "),s("li",[t._v("controller 负责页面访问控制")]),t._v(" "),s("li",[t._v("config 目录主要放一些配置类")])]),t._v(" "),s("h2",{attrs:{id:"spring-ioc-容器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-ioc-容器"}},[t._v("#")]),t._v(" Spring IOC 容器")]),t._v(" "),s("h2",{attrs:{id:"装饰器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#装饰器"}},[t._v("#")]),t._v(" 装饰器")]),t._v(" "),s("h3",{attrs:{id:"springbootapplication"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#springbootapplication"}},[t._v("#")]),t._v(" @SpringBootApplication")]),t._v(" "),s("p",[t._v("以下三种装饰器的集合")]),t._v(" "),s("ul",[s("li",[t._v("@EnableAutoConfiguration:启用 SpringBoot 的自动配置机制")]),t._v(" "),s("li",[t._v("@ComponentScan: 扫描被@Component (@Service,@Controller)注解的bean, 注解默认会扫描该类所在的包下所有的类。")]),t._v(" "),s("li",[t._v("@Configuration:允许在上下文中注册额外的bean或导入其他配置类。")])]),t._v(" "),s("h3",{attrs:{id:"requestmapping-getmapping-postmapping"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#requestmapping-getmapping-postmapping"}},[t._v("#")]),t._v(" @RequestMapping @GetMapping @PostMapping")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("@RestController 将返回的对象数据直接以 JSON 或 XML 形式写入 HTTP 响应(Response)中。绝大部分情况下都是直接以 JSON 形式返回给客户端, 很少的情况下才会以 XML 形式返回。转换成 XML 形式还需要额为的工作, 上面代码中演示的直接就是将对象数据直接以 JSON 形式写入 HTTP 响应(Response)中。")])]),t._v(" "),s("li",[s("p",[t._v("@RequestMapping :上面的示例中没有指定 GET 与 PUT、POST 等, 因为**@RequestMapping默认映射所有HTTP Action**, 你可以使用@RequestMapping(method=ActionType)来缩小这个映射。")])]),t._v(" "),s("li",[s("p",[t._v("@PostMapping实际上就等价于 @RequestMapping(method = RequestMethod.POST), 同样的  @DeleteMapping ,@GetMapping也都一样, 常用的 HTTP Action 都有一个这种形式的注解所对应。")])]),t._v(" "),s("li",[s("p",[t._v("@PathVariable :取url地址中的参数。@RequestParam  url的查询参数值。")])]),t._v(" "),s("li",[s("p",[t._v("@RequestBody:可以将 HttpRequest body 中的 JSON 类型数据反序列化为合适的 Java 类型。")])]),t._v(" "),s("li",[s("p",[t._v("@ResponseEntity: 表示整个HTTP Response:状态码, 标头和正文内容。我们可以使用它来自定义HTTP Response 的内容。")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);