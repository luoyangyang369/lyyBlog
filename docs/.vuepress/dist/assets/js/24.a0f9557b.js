(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{523:function(v,_,n){"use strict";n.r(_);var t=n(6),s=Object(t.a)({},(function(){var v=this,_=v.$createElement,n=v._self._c||_;return n("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[n("p",[v._v("一句话简单来说, "),n("strong",[v._v("索引的出现其实就是为了提高数据查询的效率")]),v._v(", 就像书的目录一样。")]),v._v(" "),n("p",[v._v("一本 500 页的书, 如果你想快速找到其中的某一个知识点, 在不借助目录的情况下, 那我估计你可得找一会儿。同样, 对于数据库的表而言, 索引其实就是它的“目录”。\n")]),v._v(" "),n("h2",{attrs:{id:"索引优缺点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#索引优缺点"}},[v._v("#")]),v._v(" 索引优缺点")]),v._v(" "),n("p",[v._v("虽然索引可以提高数据查询的速度, 但是任何事物都是双刃剑, 它也有一些缺点: 索引占据一定磁盘空间, 就 像 有 按 笔画查找的目录的书会比没有这种目录的书页数要多一些。")]),v._v(" "),n("p",[v._v("索引减慢了数据插入和删除的速度。因为每次插入和删除的时候都需要更新索引, 一个 表拥 有的索引越多, 则写操作的平均性能下降就越大。")]),v._v(" "),n("h2",{attrs:{id:"索引的常见模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#索引的常见模型"}},[v._v("#")]),v._v(" 索引的常见模型")]),v._v(" "),n("p",[v._v("索引的出现是为了提高查询效率, 但是实现索引的方式却有很多种, 所以这里也就引入了索引模型的概念。可以用于提高读写效率的数据结构很多, 这里介绍三种常见、也比较简单的数据结构, 它们分别是哈希表、有序数组和搜索树。")]),v._v(" "),n("ul",[n("li",[v._v("哈希表")])]),v._v(" "),n("p",[v._v("哈希表这种结构"),n("strong",[v._v("适用于只有等值查询")]),v._v("的场景, 比如 Memcached 及其他一些 NoSQL 引擎")]),v._v(" "),n("ul",[n("li",[v._v("有序数组")])]),v._v(" "),n("p",[v._v("在"),n("strong",[v._v("等值查询和范围查询")]),v._v("场景中的性能就都非常优秀")]),v._v(" "),n("p",[v._v("如果仅仅看查询效率, 有序数组就是最好的数据结构了。但是, 在需要更新数据的时候就麻烦了, 你往中间插入一个记录就必须得挪动后面所有的记录, 成本太高。")]),v._v(" "),n("p",[v._v("所以, 有序数组索引"),n("strong",[v._v("只适用于静态存储引擎")]),v._v(", 比如你要保存的是 2017 年某个城市的所有人口信息, 这类不会再修改的数据。")]),v._v(" "),n("ul",[n("li",[v._v("二叉搜索树")])]),v._v(" "),n("p",[v._v("特点:每个节点的左儿子小于父节点, 父节点又小于右儿子。")]),v._v(" "),n("p",[v._v("当然为了维持 O(log(N)) 的查询复杂度, 你就需要保持这棵树是平衡二叉树。为了做这个保证, "),n("strong",[v._v("更新的时间复杂度")]),v._v("也是 O(log(N))。")]),v._v(" "),n("p",[v._v("树可以有二叉, 也可以有多叉。多叉树就是每个节点有多个儿子, 儿子之间的大小保证从左到右递增。二叉树是搜索效率最高的, 但是实际上大多数的数据库存储却并不使用二叉树。其原因是, 索引不止存在内存中, 还要写到磁盘上。")]),v._v(" "),n("p",[v._v("你可以想象一下一棵 100 万节点的平衡二叉树, 树高 20。一次查询可能需要访问 20 个数据块。在机械硬盘时代, 从磁盘随机读一个数据块需要 10 ms 左右的寻址时间。也就是说, 对于一个 100 万行的表, 如果使用二叉树来存储, 单独访问一个行可能需要 20 个 10 ms 的时间, 这个查询可真够慢的。")]),v._v(" "),n("p",[v._v("为了让一个查询尽量少地读磁盘, 就必须让查询过程访问尽量少的数据块。那么, 我们就不应该使用二叉树, 而是要使用“N 叉”树。这里, “N 叉”树中的“N”取决于数据块的大小。")]),v._v(" "),n("p",[v._v("以 InnoDB 的一个整数字段索引为例, "),n("strong",[v._v("这个 N 差不多是 1200")]),v._v("。这棵树高是 4 的时候, 就可以存 1200 的 3 次方个值, 这已经 17 亿了。考虑到树根的数据块总是在内存中的, 一个 10 亿行的表上一个整数字段的索引, 查找一个值最多只需要访问 3 次磁盘。其实, 树的第二层也有很大概率在内存中, 那么访问磁盘的平均次数就更少了。")]),v._v(" "),n("h2",{attrs:{id:"innodb-的索引模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#innodb-的索引模型"}},[v._v("#")]),v._v(" InnoDB 的索引模型")]),v._v(" "),n("p",[v._v("在 InnoDB 中, 表都是根据主键顺序以索引的形式存放的, 这种存储方式的表称为索引组织表。又因为前面我们提到的, InnoDB 使用了 B+ 树索引模型, 所以数据都是存储在 B+ 树中的。")]),v._v(" "),n("p",[v._v("每一个索引在 InnoDB 里面对应一棵 B+ 树。")]),v._v(" "),n("p",[v._v("假设, 我们有一个主键列为 ID 的表, 表中有字段 k, 并且在 k 上有索引。")]),v._v(" "),n("p",[v._v("这个表的建表语句是:")]),v._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[v._v("mysql> create table T(\nid int primary key, \nk int not null, \nname varchar(16),\nindex (k))engine=InnoDB;\n")])]),v._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[v._v("1")]),n("br"),n("span",{staticClass:"line-number"},[v._v("2")]),n("br"),n("span",{staticClass:"line-number"},[v._v("3")]),n("br"),n("span",{staticClass:"line-number"},[v._v("4")]),n("br"),n("span",{staticClass:"line-number"},[v._v("5")]),n("br")])]),n("h2",{attrs:{id:"补充"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#补充"}},[v._v("#")]),v._v(" 补充")]),v._v(" "),n("p",[v._v("主键与索引的区别:主键也是一种索引, 主键也是一种唯一索引, 但索引的作用主要是提高查找速度, 而主键作用主要是标识记录唯一性(当然也便于查找)。")])])}),[],!1,null,null,null);_.default=s.exports}}]);