(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{537:function(t,e,a){"use strict";a.r(e);var s=a(6),l=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"说说list-set-map三者的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说说list-set-map三者的区别"}},[t._v("#")]),t._v(" 说说List,Set,Map三者的区别？")]),t._v(" "),a("ul",[a("li",[t._v("List(对付顺序的好帮手): 存储的元素是有序的、可重复的.")]),t._v(" "),a("li",[t._v("Set(注重独一无二的性质): 存储的元素是无序的、不可重复的.")]),t._v(" "),a("li",[t._v('Map(用 Key 来搜索的专家): 使用键值对(kye-value)存储, 类似于数学上的函数 y=f(x), “x”代表 key, "y"代表 value, Key 是无序的、不可重复的, value 是无序的、可重复的, 每个键最多映射到一个值.')])]),t._v(" "),a("h3",{attrs:{id:"arraylist-与-linkedlist-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-与-linkedlist-区别"}},[t._v("#")]),t._v(" Arraylist 与 LinkedList 区别?")]),t._v(" "),a("p",[t._v("1、 "),a("strong",[t._v("是否保证线程安全")]),t._v(": ArrayList 和 LinkedList 都是不同步的, 也就是不保证线程安全;")]),t._v(" "),a("p",[t._v("2、 "),a("strong",[t._v("底层数据结构")]),t._v(": Arraylist 底层使用的是 Object 数组;LinkedList 底层使用的是 双向链表 数据结构(JDK1.6 之前为循环链表, JDK1.7 取消了循环.注意双向链表和双向循环链表的区别, 下面有介绍到！)")]),t._v(" "),a("p",[t._v("3、 "),a("strong",[t._v("插入和删除是否受元素位置的影响")]),t._v(":")]),t._v(" "),a("p",[t._v("① ArrayList 采用数组存储, 所以插入和删除元素的时间复杂度受元素位置的影响. 比如:执行add(E e)方法的时候,  ArrayList 会默认在将指定的元素追加到此列表的末尾, 这种情况时间复杂度就是 O(1).但是如果要在指定位置 i 插入和删除元素的话(add(int index, E element))时间复杂度就为 O(n-i).因为在进行上述操作的时候集合中第 i 和第 i 个元素之后的(n-i)个元素都要执行向后位/向前移一位的操作.")]),t._v(" "),a("p",[t._v("② LinkedList 采用链表存储, 所以对于add(E e)方法的插入, 删除元素时间复杂度不受元素位置的影响, 近似 O(1), 如果是要在指定位置i插入和删除元素的话((add(int index, E element)) 时间复杂度近似为o(n))因为需要先移动到指定位置再插入.")]),t._v(" "),a("p",[t._v("4、 "),a("strong",[t._v("是否支持快速随机访问")]),t._v(": LinkedList 不支持高效的随机元素访问, 而 ArrayList 支持.快速随机访问就是通过元素的序号快速获取元素对象(对应于get(int index)方法).")]),t._v(" "),a("p",[t._v("5、 "),a("strong",[t._v("内存空间占用")]),t._v(": ArrayList 的空 间浪费主要体现在在 list 列表的结尾会预留一定的容量空间, 而 LinkedList 的空间花费则体现在它的每一个元素都需要消耗比 ArrayList 更多的空间(因为要存放直接后继和直接前驱以及数据).")]),t._v(" "),a("h3",{attrs:{id:"hashmap-和-hashtable-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-和-hashtable-的区别"}},[t._v("#")]),t._v(" HashMap 和 HashTable 的区别")]),t._v(" "),a("p",[t._v("1、 "),a("strong",[t._v("线程是否安全")]),t._v("： HashMap 是非线程安全的，HashTable 是线程安全的,因为 HashTable 内部的方法基本都经过synchronized 修饰。（如果你要保证线程安全的话就使用 ConcurrentHashMap 吧！）；")]),t._v(" "),a("p",[t._v("2、 "),a("strong",[t._v("效率")]),t._v("： 因为线程安全的问题，HashMap 要比 HashTable 效率高一点。另外，HashTable 基本被淘汰，不要在代码中使用它；")]),t._v(" "),a("p",[t._v("3、 "),a("strong",[t._v("对 Null key 和 Null value 的支持")]),t._v("： HashMap 可以存储 null 的 key 和 value，但 null 作为键只能有一个，null 作为值可以有多个；HashTable 不允许有 null 键和 null 值，否则会抛出 NullPointerException。")]),t._v(" "),a("p",[t._v("4、 "),a("strong",[t._v("初始容量大小和每次扩充容量大小的不同")]),t._v(" ： ① 创建时如果不指定容量初始值，Hashtable 默认的初始大小为 11，之后每次扩充，容量变为原来的 2n+1。HashMap 默认的初始化大小为 16。之后每次扩充，容量变为原来的 2 倍。② 创建时如果给定了容量初始值，那么 Hashtable 会直接使用你给定的大小，而 HashMap 会将其扩充为 2 的幂次方大小（HashMap 中的tableSizeFor()方法保证，下面给出了源代码）。也就是说 HashMap 总是使用 2 的幂作为哈希表的大小,后面会介绍到为什么是 2 的幂次方。")]),t._v(" "),a("p",[t._v("5、 "),a("strong",[t._v("底层数据结构")]),t._v("： JDK1.8 以后的 HashMap 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间。Hashtable 没有这样的机制。")]),t._v(" "),a("p",[t._v("简单来说, HashMap由数组+链表组成的, 数组是HashMap的主体, 链表则是主要为了解决哈希冲突而存在的, 如果定位到的数组位置不含链表(当前entry的next指向null),那么查找, 添加等操作很快, 仅需一次寻址即可;如果定位到的数组包含链表, 对于添加操作, 其时间复杂度为O(n), 首先遍历链表, 存在即覆盖, 否则新增;对于查找操作来讲, 仍需遍历链表, 然后通过key对象的equals方法逐一比对查找.所以, 性能考虑, HashMap中的链表出现越少, 性能才会越好.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("HashTable")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("HashMap")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("基于Dictionany类")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("基于AbstractMap类")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("key和value都不允许为null, Hashtable遇到null,  直接返回NullPointerException")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("key和value都允许为nill, HashMap遇到key为nl的时候, 调用putForNullkey方法进行处理.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("线程安全几乎所有的public的方法都是synchronized的")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("非线程安全")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("速度慢")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("速度快")])])])]),t._v(" "),a("h3",{attrs:{id:"hashmap-和-hashset区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-和-hashset区别"}},[t._v("#")]),t._v(" HashMap 和 HashSet区别")]),t._v(" "),a("p",[t._v("如果你看过 HashSet 源码的话就应该知道：HashSet 底层就是基于 HashMap 实现的。（HashSet 的源码非常非常少，因为除了 clone()、writeObject()、readObject()是 HashSet 自己不得不实现之外，其他方法都是直接调用 HashMap 中的方法。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("HashMap")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("HashSet")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("实现了 Map 接口")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("实现 Set 接口")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("存储键值对")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("仅存储对象")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("调用 put()向 map 中添加元素")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("调用 add()方法向 Set 中添加元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("HashMap 使用键（Key）计算 hashcode")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("HashSet 使用成员对象来计算 hashcode 值，对于两个对象来说 hashcode 可能相同，所以 equals()方法用来判断对象的相等性")])])])]),t._v(" "),a("h3",{attrs:{id:"hashmap-和-linkedhashmap-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-和-linkedhashmap-的区别"}},[t._v("#")]),t._v(" HashMap 和 LinkedHashMap 的区别")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("HashMap")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("LinkedHashMap")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("无序存储")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("有序存储, 以双向链表实现")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("读取速度与容量有关")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("读取速度与容量无关")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("线程不安全")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("线程不安全")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("key-value都允许null")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("key-value都允许null")])])])]),t._v(" "),a("h3",{attrs:{id:"hashmap-和-treemap-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-和-treemap-的区别"}},[t._v("#")]),t._v(" HashMap 和 TreeMap 的区别")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("HashMap")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("TreeMap")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("遍历出来数据无序")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("自然排序或者创建映射提供的Comparator进行排序")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("基于散列表")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("红黑树")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("取值速度快")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("取值速度慢")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("适用于在Map中插入、删除和定位元素")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("适用于按自然顺序或自定义顺序遍历键(key)")])])])])])}),[],!1,null,null,null);e.default=l.exports}}]);